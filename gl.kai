
#use "glconstants.kai" _

// Swapping argument orders:
//     (\*)*(i8|u8|i16|u16|i32|u32|i64|u64|f32|f64|rawptr|i32|ui32) ([\w_]+)
//     $3: $1$2


/*
Type conversion overview:
    typedef unsigned i32 GLenum;     -> u32
    typedef unsigned char GLboolean; -> u8
    typedef unsigned i32 GLbitfield; -> u32
    typedef signed char GLbyte;      -> i8
    typedef short GLshort;           -> i16
    typedef i32 GLi32;               -> i32
    typedef unsigned char GLubyte;   -> u8
    typedef unsigned short GLushort; -> u16
    typedef unsigned i32 GLui32;     -> u32
    typedef i32 GLsizei;             -> i32
    typedef float GLfloat;           -> f32
    typedef double GLdouble;         -> f64
    typedef char GLchar;             -> u8
    typedef ptrdiff_t GLi32ptr;      -> i32
    typedef ptrdiff_t GLsizeiptr;    -> i32
    typedef i3264_t GLi3264;         -> i64
    typedef ui3264_t GLui3264;       -> u64

    void*                            -> rawptr
*/

sync_t :: rawptr
debug_proc_t :: (source: u32, type: u32, id: u32, severity: u32, length: i32, message: *u8, userParam: rawptr) -> void


// VERSION_1_0
CullFace:               (mode: u32) -> void
FrontFace:              (mode: u32) -> void
Hi32:                   (target: u32, mode: u32) -> void
LineWidth:              (width: f32) -> void
PointSize:              (size: f32) -> void
PolygonMode:            (face: u32, mode: u32) -> void
Scissor:                (x: i32, y: i32, width: i32, height: i32) -> void
TexParameterf:          (target: u32, pname: u32, param: f32) -> void
TexParameterfv:         (target: u32, pname: u32, params: *f32) -> void
TexParameteri:          (target: u32, pname: u32, param: i32) -> void
TexParameteriv:         (target: u32, pname: u32, params: *i32) -> void
TexImage1D:             (target: u32, level: i32, i32ernalformat: i32, width: i32, border: i32, format: u32, type_: u32, pixels: rawptr) -> void
TexImage2D:             (target: u32, level: i32, i32ernalformat: i32, width: i32, height: i32, border: i32, format: u32, type_: u32, pixels: rawptr) -> void
DrawBuffer:             (buf: u32) -> void
Clear:                  (mask: u32) -> void
ClearColor:             (red: f32, green: f32, blue: f32, alpha: f32) -> void
ClearStencil:           (s: i32) -> void
ClearDepth:             (depth: f64) -> void
StencilMask:            (mask: u32) -> void
ColorMask:              (red: u8, green: u8, blue: u8, alpha: u8) -> void
DepthMask:              (flag: u8) -> void
Disable:                (cap: u32) -> void
Enable:                 (cap: u32) -> void
Finish:                 () -> void
Flush:                  () -> void
BlendFunc:              (sfactor: u32, dfactor: u32) -> void
LogicOp:                (opcode: u32) -> void
StencilFunc:            (func: u32, ref: i32, mask: u32) -> void
StencilOp:              (fail: u32, zfail: u32, zpass: u32) -> void
DepthFunc:              (func: u32) -> void
PixelStoref:            (pname: u32, param: f32) -> void
PixelStorei:            (pname: u32, param: i32) -> void
ReadBuffer:             (src: u32) -> void
ReadPixels:             (x: i32, y: i32, width: i32, height: i32, format: u32, type_: u32, pixels: rawptr) -> void
GetBooleanv:            (pname: u32, data: *u8) -> void
GetDoublev:             (pname: u32, data: *f64) -> void
GetError:               () -> u32
GetFloatv:              (pname: u32, data: *f32) -> void
Geti32egerv:            (pname: u32, data: *i32) -> void
GetString:              (name: u32) -> *u8
GetTexImage:            (target: u32,  level: i32, format: u32, type_: u32, pixels: rawptr) -> void
GetTexParameterfv:      (target: u32, pname: u32, params: *f32) -> void
GetTexParameteriv:      (target: u32, pname: u32, params: *i32) -> void
GetTexLevelParameterfv: (target: u32, level: i32, pname: u32, params: *f32) -> void
GetTexLevelParameteriv: (target: u32, level: i32, pname: u32, params: *i32) -> void
IsEnabled:              (cap: u32) -> u8
DepthRange:             (near: f64, far: f64) -> void
Viewport:               (x: i32, y: i32, width: i32, height: i32) -> void

load1_0 :: fn(getProcAddress: (*u8) -> rawptr) -> void {
    CullFace               = autocast getProcAddress("glCullFace\x00".raw)
    FrontFace              = autocast getProcAddress("glFrontFace\x00".raw)
    Hi32                   = autocast getProcAddress("glHi32\x00".raw)
    LineWidth              = autocast getProcAddress("glLineWidth\x00".raw)
    PointSize              = autocast getProcAddress("glPointSize\x00".raw)
    PolygonMode            = autocast getProcAddress("glPolygonMode\x00".raw)
    Scissor                = autocast getProcAddress("glScissor\x00".raw)
    TexParameterf          = autocast getProcAddress("glTexParameterf\x00".raw)
    TexParameterfv         = autocast getProcAddress("glTexParameterfv\x00".raw)
    TexParameteri          = autocast getProcAddress("glTexParameteri\x00".raw)
    TexParameteriv         = autocast getProcAddress("glTexParameteriv\x00".raw)
    TexImage1D             = autocast getProcAddress("glTexImage1D\x00".raw)
    TexImage2D             = autocast getProcAddress("glTexImage2D\x00".raw)
    DrawBuffer             = autocast getProcAddress("glDrawBuffer\x00".raw)
    Clear                  = autocast getProcAddress("glClear\x00".raw)
    ClearColor             = autocast getProcAddress("glClearColor\x00".raw)
    ClearStencil           = autocast getProcAddress("glClearStencil\x00".raw)
    ClearDepth             = autocast getProcAddress("glClearDepth\x00".raw)
    StencilMask            = autocast getProcAddress("glStencilMask\x00".raw)
    ColorMask              = autocast getProcAddress("glColorMask\x00".raw)
    DepthMask              = autocast getProcAddress("glDepthMask\x00".raw)
    Disable                = autocast getProcAddress("glDisable\x00".raw)
    Enable                 = autocast getProcAddress("glEnable\x00".raw)
    Finish                 = autocast getProcAddress("glFinish\x00".raw)
    Flush                  = autocast getProcAddress("glFlush\x00".raw)
    BlendFunc              = autocast getProcAddress("glBlendFunc\x00".raw)
    LogicOp                = autocast getProcAddress("glLogicOp\x00".raw)
    StencilFunc            = autocast getProcAddress("glStencilFunc\x00".raw)
    StencilOp              = autocast getProcAddress("glStencilOp\x00".raw)
    DepthFunc              = autocast getProcAddress("glDepthFunc\x00".raw)
    PixelStoref            = autocast getProcAddress("glPixelStoref\x00".raw)
    PixelStorei            = autocast getProcAddress("glPixelStorei\x00".raw)
    ReadBuffer             = autocast getProcAddress("glReadBuffer\x00".raw)
    ReadPixels             = autocast getProcAddress("glReadPixels\x00".raw)
    GetBooleanv            = autocast getProcAddress("glGetBooleanv\x00".raw)
    GetDoublev             = autocast getProcAddress("glGetDoublev\x00".raw)
    GetError               = autocast getProcAddress("glGetError\x00".raw)
    GetFloatv              = autocast getProcAddress("glGetFloatv\x00".raw)
    Geti32egerv            = autocast getProcAddress("glGeti32egerv\x00".raw)
    GetString              = autocast getProcAddress("glGetString\x00".raw)
    GetTexImage            = autocast getProcAddress("glGetTexImage\x00".raw)
    GetTexParameterfv      = autocast getProcAddress("glGetTexParameterfv\x00".raw)
    GetTexParameteriv      = autocast getProcAddress("glGetTexParameteriv\x00".raw)
    GetTexLevelParameterfv = autocast getProcAddress("glGetTexLevelParameterfv\x00".raw)
    GetTexLevelParameteriv = autocast getProcAddress("glGetTexLevelParameteriv\x00".raw)
    IsEnabled              = autocast getProcAddress("glIsEnabled\x00".raw)
    DepthRange             = autocast getProcAddress("glDepthRange\x00".raw)
    Viewport               = autocast getProcAddress("glViewport\x00".raw)
}


// VERSION_1_1
DrawArrays:        (mode: u32, first: i32, count: i32) -> void
DrawElements:      (mode: u32, count: i32, type_: u32, indices: rawptr) -> void
PolygonOffset:     (factor: f32, units: f32) -> void
CopyTexImage1D:    (target: u32, level: i32, i32ernalformat: u32, x: i32, y: i32, width: i32, border: i32) -> void
CopyTexImage2D:    (target: u32, level: i32, i32ernalformat: u32, x: i32, y: i32, width: i32, height: i32, border: i32) -> void
CopyTexSubImage1D: (target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32) -> void
CopyTexSubImage2D: (target: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) -> void
TexSubImage1D:     (target: u32, level: i32, xoffset: i32, width: i32, format: u32, type_: u32, pixels: rawptr) -> void
TexSubImage2D:     (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type_: u32, pixels: rawptr) -> void
BindTexture:       (target: u32, texture: u32) -> void
DeleteTextures:    (n: i32, textures: *u32) -> void
GenTextures:       (n: i32, textures: *u32) -> void
IsTexture:         (texture: u32) -> u8

load1_1 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    DrawArrays        = autocast getProcAddress("glDrawArrays\x00".raw)
    DrawElements      = autocast getProcAddress("glDrawElements\x00".raw)
    PolygonOffset     = autocast getProcAddress("glPolygonOffset\x00".raw)
    CopyTexImage1D    = autocast getProcAddress("glCopyTexImage1D\x00".raw)
    CopyTexImage2D    = autocast getProcAddress("glCopyTexImage2D\x00".raw)
    CopyTexSubImage1D = autocast getProcAddress("glCopyTexSubImage1D\x00".raw)
    CopyTexSubImage2D = autocast getProcAddress("glCopyTexSubImage2D\x00".raw)
    TexSubImage1D     = autocast getProcAddress("glTexSubImage1D\x00".raw)
    TexSubImage2D     = autocast getProcAddress("glTexSubImage2D\x00".raw)
    BindTexture       = autocast getProcAddress("glBindTexture\x00".raw)
    DeleteTextures    = autocast getProcAddress("glDeleteTextures\x00".raw)
    GenTextures       = autocast getProcAddress("glGenTextures\x00".raw)
    IsTexture         = autocast getProcAddress("glIsTexture\x00".raw)
}


// VERSION_1_2
DrawRangeElements: (mode: u32, start: u32, end: u32, count: i32, type_: u32, indices: rawptr) -> void
TexImage3D:        (target: u32, level: i32, i32ernalformat: i32, width: i32, height: i32, depth: i32, border: i32, format: u32, type_: u32, pixels: rawptr) -> void
TexSubImage3D:     (target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, type_: u32, pixels: rawptr) -> void
CopyTexSubImage3D: (target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) -> void

load1_2 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    DrawRangeElements = autocast getProcAddress("glDrawRangeElements\x00".raw)
    TexImage3D        = autocast getProcAddress("glTexImage3D\x00".raw)
    TexSubImage3D     = autocast getProcAddress("glTexSubImage3D\x00".raw)
    CopyTexSubImage3D = autocast getProcAddress("glCopyTexSubImage3D\x00".raw)
}


// VERSION_1_3
ActiveTexture:           (texture: u32) -> void
SampleCoverage:          (value: f32, invert: u8) -> void
CompressedTexImage3D:    (target: u32, level: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32, border: i32, imageSize: i32, data: rawptr) -> void
CompressedTexImage2D:    (target: u32, level: i32, i32ernalformat: u32, width: i32, height: i32, border: i32, imageSize: i32, data: rawptr) -> void
CompressedTexImage1D:    (target: u32, level: i32, i32ernalformat: u32, width: i32, border: i32, imageSize: i32, data: rawptr) -> void
CompressedTexSubImage3D: (target: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: rawptr) -> void
CompressedTexSubImage2D: (target: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: rawptr) -> void
CompressedTexSubImage1D: (target: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: rawptr) -> void
GetCompressedTexImage:   (target: u32, level: i32, img: rawptr) -> void

load1_3 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    ActiveTexture           = autocast getProcAddress("glActiveTexture\x00".raw)
    SampleCoverage          = autocast getProcAddress("glSampleCoverage\x00".raw)
    CompressedTexImage3D    = autocast getProcAddress("glCompressedTexImage3D\x00".raw)
    CompressedTexImage2D    = autocast getProcAddress("glCompressedTexImage2D\x00".raw)
    CompressedTexImage1D    = autocast getProcAddress("glCompressedTexImage1D\x00".raw)
    CompressedTexSubImage3D = autocast getProcAddress("glCompressedTexSubImage3D\x00".raw)
    CompressedTexSubImage2D = autocast getProcAddress("glCompressedTexSubImage2D\x00".raw)
    CompressedTexSubImage1D = autocast getProcAddress("glCompressedTexSubImage1D\x00".raw)
    GetCompressedTexImage   = autocast getProcAddress("glGetCompressedTexImage\x00".raw)
}


// VERSION_1_4
BlendFuncSeparate: (sfactorRGB: u32, dfactorRGB: u32, sfactorAlpha: u32, dfactorAlpha: u32) -> void
MultiDrawArrays:   (mode: u32, first: *i32, count: *i32, drawcount: i32) -> void
MultiDrawElements: (mode: u32, count: *i32, type_: u32, indices: *rawptr, drawcount: i32) -> void
PointParameterf:   (pname: u32, param: f32) -> void
PointParameterfv:  (pname: u32, params: *f32) -> void
PointParameteri:   (pname: u32, param: i32) -> void
PointParameteriv:  (pname: u32, params: *i32) -> void
BlendColor:        (red: f32, green: f32, blue: f32, alpha: f32) -> void
BlendEquation:     (mode: u32) -> void


load1_4 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    BlendFuncSeparate = autocast getProcAddress("glBlendFuncSeparate\x00".raw)
    MultiDrawArrays   = autocast getProcAddress("glMultiDrawArrays\x00".raw)
    MultiDrawElements = autocast getProcAddress("glMultiDrawElements\x00".raw)
    PointParameterf   = autocast getProcAddress("glPointParameterf\x00".raw)
    PointParameterfv  = autocast getProcAddress("glPointParameterfv\x00".raw)
    PointParameteri   = autocast getProcAddress("glPointParameteri\x00".raw)
    PointParameteriv  = autocast getProcAddress("glPointParameteriv\x00".raw)
    BlendColor        = autocast getProcAddress("glBlendColor\x00".raw)
    BlendEquation     = autocast getProcAddress("glBlendEquation\x00".raw)
}


// VERSION_1_5
GenQueries:           (n: i32, ids: *u32) -> void
DeleteQueries:        (n: i32, ids: *u32) -> void
IsQuery:              (id: u32) -> u8
BeginQuery:           (target: u32, id: u32) -> void
EndQuery:             (target: u32) -> void
GetQueryiv:           (target: u32, pname: u32, params: *i32) -> void
GetQueryObjectiv:     (id: u32, pname: u32, params: *i32) -> void
GetQueryObjectuiv:    (id: u32, pname: u32, params: *u32) -> void
BindBuffer:           (target: u32, buffer: u32) -> void
DeleteBuffers:        (n: i32, buffers: *u32) -> void
GenBuffers:           (n: i32, buffers: *u32) -> void
IsBuffer:             (buffer: u32) -> u8
BufferData:           (target: u32, size: i32, data: rawptr, usage: u32) -> void
BufferSubData:        (target: u32, offset: i32, size: i32, data: rawptr) -> void
GetBufferSubData:     (target: u32, offset: i32, size: i32, data: rawptr) -> void
MapBuffer:            (target: u32, access: u32) -> rawptr
UnmapBuffer:          (target: u32) -> u8
GetBufferParameteriv: (target: u32, pname: u32, params: *i32) -> void
GetBufferPointerv:    (target: u32, pname: u32, params: *rawptr) -> void

load1_5 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    GenQueries           = autocast getProcAddress("glGenQueries\x00".raw)
    DeleteQueries        = autocast getProcAddress("glDeleteQueries\x00".raw)
    IsQuery              = autocast getProcAddress("glIsQuery\x00".raw)
    BeginQuery           = autocast getProcAddress("glBeginQuery\x00".raw)
    EndQuery             = autocast getProcAddress("glEndQuery\x00".raw)
    GetQueryiv           = autocast getProcAddress("glGetQueryiv\x00".raw)
    GetQueryObjectiv     = autocast getProcAddress("glGetQueryObjectiv\x00".raw)
    GetQueryObjectuiv    = autocast getProcAddress("glGetQueryObjectuiv\x00".raw)
    BindBuffer           = autocast getProcAddress("glBindBuffer\x00".raw)
    DeleteBuffers        = autocast getProcAddress("glDeleteBuffers\x00".raw)
    GenBuffers           = autocast getProcAddress("glGenBuffers\x00".raw)
    IsBuffer             = autocast getProcAddress("glIsBuffer\x00".raw)
    BufferData           = autocast getProcAddress("glBufferData\x00".raw)
    BufferSubData        = autocast getProcAddress("glBufferSubData\x00".raw)
    GetBufferSubData     = autocast getProcAddress("glGetBufferSubData\x00".raw)
    MapBuffer            = autocast getProcAddress("glMapBuffer\x00".raw)
    UnmapBuffer          = autocast getProcAddress("glUnmapBuffer\x00".raw)
    GetBufferParameteriv = autocast getProcAddress("glGetBufferParameteriv\x00".raw)
    GetBufferPointerv    = autocast getProcAddress("glGetBufferPointerv\x00".raw)
}


// VERSION_2_0
BlendEquationSeparate:    (modeRGB: u32, modeAlpha: u32) -> void
DrawBuffers:              (n: i32, bufs: *u32) -> void
StencilOpSeparate:        (face: u32, sfail: u32, dpfail: u32, dppass: u32) -> void
StencilFuncSeparate:      (face: u32, func: u32, ref: i32, mask: u32) -> void
StencilMaskSeparate:      (face: u32, mask: u32) -> void
AttachShader:             (program: u32, shader: u32) -> void
BindAttribLocation:       (program: u32, index: u32, name: *u8) -> void
CompileShader:            (shader: u32) -> void
CreateProgram:            () -> u32
CreateShader:             (type_: u32) -> u32
DeleteProgram:            (program: u32) -> void
DeleteShader:             (shader: u32) -> void
DetachShader:             (program: u32, shader: u32) -> void
DisableVertexAttribArray: (index: u32) -> void
EnableVertexAttribArray:  (index: u32) -> void
GetActiveAttrib:          (program: u32, index: u32, bufSize: i32, length: *i32, size: *i32, type_: *u32, name: *u8) -> void
GetActiveUniform:         (program: u32, index: u32, bufSize: i32, length: *i32, size: *i32, type_: *u32, name: *u8) -> void
GetAttachedShaders:       (program: u32, maxCount: i32, count: *i32, shaders: *u32) -> void
GetAttribLocation:        (program: u32, name: *u8) -> i32
GetProgramiv:             (program: u32, pname: u32, params: *i32) -> void
GetProgramInfoLog:        (program: u32, bufSize: i32, length: *i32, infoLog: *u8) -> void
GetShaderiv:              (shader: u32, pname: u32, params: *i32) -> void
GetShaderInfoLog:         (shader: u32, bufSize: i32, length: *i32, infoLog: *u8) -> void
GetShaderSource:          (shader: u32, bufSize: i32, length: *i32, source: *u8) -> void
GetUniformLocation:       (program: u32, name: *u8) -> i32
GetUniformfv:             (program: u32, location: i32, params: *f32) -> void
GetUniformiv:             (program: u32, location: i32, params: *i32) -> void
GetVertexAttribdv:        (index: u32, pname: u32, params: *f64) -> void
GetVertexAttribfv:        (index: u32, pname: u32, params: *f32) -> void
GetVertexAttribiv:        (index: u32, pname: u32, params: *i32) -> void
GetVertexAttribPointerv:  (index: u32, pname: u32, poi32er: *rawptr) -> void
IsProgram:                (program: u32) -> u8
IsShader:                 (shader: u32) -> u8
LinkProgram:              (program: u32) -> void
ShaderSource:             (shader: u32, count: i32, string: **u8, length: *i32) -> void
UseProgram:               (program: u32) -> void
Uniform1f:                (location: i32, v0: f32) -> void
Uniform2f:                (location: i32, v0: f32, v1: f32) -> void
Uniform3f:                (location: i32, v0: f32, v1: f32, v2: f32) -> void
Uniform4f:                (location: i32, v0: f32, v1: f32, v2: f32, v3: f32) -> void
Uniform1i:                (location: i32, v0: i32) -> void
Uniform2i:                (location: i32, v0: i32, v1: i32) -> void
Uniform3i:                (location: i32, v0: i32, v1: i32, v2: i32) -> void
Uniform4i:                (location: i32, v0: i32, v1: i32, v2: i32, v3: i32) -> void
Uniform1fv:               (location: i32, count: i32, value: *f32) -> void
Uniform2fv:               (location: i32, count: i32, value: *f32) -> void
Uniform3fv:               (location: i32, count: i32, value: *f32) -> void
Uniform4fv:               (location: i32, count: i32, value: *f32) -> void
Uniform1iv:               (location: i32, count: i32, value: *i32) -> void
Uniform2iv:               (location: i32, count: i32, value: *i32) -> void
Uniform3iv:               (location: i32, count: i32, value: *i32) -> void
Uniform4iv:               (location: i32, count: i32, value: *i32) -> void
UniformMatrix2fv:         (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix3fv:         (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix4fv:         (location: i32, count: i32, transpose: u8, value: *f32) -> void
ValidateProgram:          (program: u32) -> void
VertexAttrib1d:           (index: u32, x: f64) -> void
VertexAttrib1dv:          (index: u32, v: *f64) -> void
VertexAttrib1f:           (index: u32, x: f32) -> void
VertexAttrib1fv:          (index: u32, v: *f32) -> void
VertexAttrib1s:           (index: u32, x: i16) -> void
VertexAttrib1sv:          (index: u32, v: *i16) -> void
VertexAttrib2d:           (index: u32, x: f64, y: f64) -> void
VertexAttrib2dv:          (index: u32, v: *f64) -> void
VertexAttrib2f:           (index: u32, x: f32, y: f32) -> void
VertexAttrib2fv:          (index: u32, v: *f32) -> void
VertexAttrib2s:           (index: u32, x: i16, y: i16) -> void
VertexAttrib2sv:          (index: u32, v: *i16) -> void
VertexAttrib3d:           (index: u32, x: f64, y: f64, z: f64) -> void
VertexAttrib3dv:          (index: u32, v: *f64) -> void
VertexAttrib3f:           (index: u32, x: f32, y: f32, z: f32) -> void
VertexAttrib3fv:          (index: u32, v: *f32) -> void
VertexAttrib3s:           (index: u32, x: i16, y: i16, z: i16) -> void
VertexAttrib3sv:          (index: u32, v: *i16) -> void
VertexAttrib4Nbv:         (index: u32, v: *i8) -> void
VertexAttrib4Niv:         (index: u32, v: *i32) -> void
VertexAttrib4Nsv:         (index: u32, v: *i16) -> void
VertexAttrib4Nub:         (index: u32, x: u8, y: u8, z: u8, w: u8) -> void
VertexAttrib4Nubv:        (index: u32, v: *u8) -> void
VertexAttrib4Nuiv:        (index: u32, v: *u32) -> void
VertexAttrib4Nusv:        (index: u32, v: *u16) -> void
VertexAttrib4bv:          (index: u32, v: *i8) -> void
VertexAttrib4d:           (index: u32, x: f64, y: f64, z: f64, w: f64) -> void
VertexAttrib4dv:          (index: u32, v: *f64) -> void
VertexAttrib4f:           (index: u32, x: f32, y: f32, z: f32, w: f32) -> void
VertexAttrib4fv:          (index: u32, v: *f32) -> void
VertexAttrib4iv:          (index: u32, v: *i32) -> void
VertexAttrib4s:           (index: u32, x: i16, y: i16, z: i16, w: i16) -> void
VertexAttrib4sv:          (index: u32, v: *i16) -> void
VertexAttrib4ubv:         (index: u32, v: *u8) -> void
VertexAttrib4uiv:         (index: u32, v: *u32) -> void
VertexAttrib4usv:         (index: u32, v: *u16) -> void
VertexAttribPointer:      (index: u32, size: i32, type_: u32, normalized: u8, stride: i32, poi32er: rawptr) -> void

load2_0 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    BlendEquationSeparate    = autocast getProcAddress("glBlendEquationSeparate\x00".raw)
    DrawBuffers              = autocast getProcAddress("glDrawBuffers\x00".raw)
    StencilOpSeparate        = autocast getProcAddress("glStencilOpSeparate\x00".raw)
    StencilFuncSeparate      = autocast getProcAddress("glStencilFuncSeparate\x00".raw)
    StencilMaskSeparate      = autocast getProcAddress("glStencilMaskSeparate\x00".raw)
    AttachShader             = autocast getProcAddress("glAttachShader\x00".raw)
    BindAttribLocation       = autocast getProcAddress("glBindAttribLocation\x00".raw)
    CompileShader            = autocast getProcAddress("glCompileShader\x00".raw)
    CreateProgram            = autocast getProcAddress("glCreateProgram\x00".raw)
    CreateShader             = autocast getProcAddress("glCreateShader\x00".raw)
    DeleteProgram            = autocast getProcAddress("glDeleteProgram\x00".raw)
    DeleteShader             = autocast getProcAddress("glDeleteShader\x00".raw)
    DetachShader             = autocast getProcAddress("glDetachShader\x00".raw)
    DisableVertexAttribArray = autocast getProcAddress("glDisableVertexAttribArray\x00".raw)
    EnableVertexAttribArray  = autocast getProcAddress("glEnableVertexAttribArray\x00".raw)
    GetActiveAttrib          = autocast getProcAddress("glGetActiveAttrib\x00".raw)
    GetActiveUniform         = autocast getProcAddress("glGetActiveUniform\x00".raw)
    GetAttachedShaders       = autocast getProcAddress("glGetAttachedShaders\x00".raw)
    GetAttribLocation        = autocast getProcAddress("glGetAttribLocation\x00".raw)
    GetProgramiv             = autocast getProcAddress("glGetProgramiv\x00".raw)
    GetProgramInfoLog        = autocast getProcAddress("glGetProgramInfoLog\x00".raw)
    GetShaderiv              = autocast getProcAddress("glGetShaderiv\x00".raw)
    GetShaderInfoLog         = autocast getProcAddress("glGetShaderInfoLog\x00".raw)
    GetShaderSource          = autocast getProcAddress("glGetShaderSource\x00".raw)
    GetUniformLocation       = autocast getProcAddress("glGetUniformLocation\x00".raw)
    GetUniformfv             = autocast getProcAddress("glGetUniformfv\x00".raw)
    GetUniformiv             = autocast getProcAddress("glGetUniformiv\x00".raw)
    GetVertexAttribdv        = autocast getProcAddress("glGetVertexAttribdv\x00".raw)
    GetVertexAttribfv        = autocast getProcAddress("glGetVertexAttribfv\x00".raw)
    GetVertexAttribiv        = autocast getProcAddress("glGetVertexAttribiv\x00".raw)
    GetVertexAttribPointerv  = autocast getProcAddress("glGetVertexAttribPointerv\x00".raw)
    IsProgram                = autocast getProcAddress("glIsProgram\x00".raw)
    IsShader                 = autocast getProcAddress("glIsShader\x00".raw)
    LinkProgram              = autocast getProcAddress("glLinkProgram\x00".raw)
    ShaderSource             = autocast getProcAddress("glShaderSource\x00".raw)
    UseProgram               = autocast getProcAddress("glUseProgram\x00".raw)
    Uniform1f                = autocast getProcAddress("glUniform1f\x00".raw)
    Uniform2f                = autocast getProcAddress("glUniform2f\x00".raw)
    Uniform3f                = autocast getProcAddress("glUniform3f\x00".raw)
    Uniform4f                = autocast getProcAddress("glUniform4f\x00".raw)
    Uniform1i                = autocast getProcAddress("glUniform1i\x00".raw)
    Uniform2i                = autocast getProcAddress("glUniform2i\x00".raw)
    Uniform3i                = autocast getProcAddress("glUniform3i\x00".raw)
    Uniform4i                = autocast getProcAddress("glUniform4i\x00".raw)
    Uniform1fv               = autocast getProcAddress("glUniform1fv\x00".raw)
    Uniform2fv               = autocast getProcAddress("glUniform2fv\x00".raw)
    Uniform3fv               = autocast getProcAddress("glUniform3fv\x00".raw)
    Uniform4fv               = autocast getProcAddress("glUniform4fv\x00".raw)
    Uniform1iv               = autocast getProcAddress("glUniform1iv\x00".raw)
    Uniform2iv               = autocast getProcAddress("glUniform2iv\x00".raw)
    Uniform3iv               = autocast getProcAddress("glUniform3iv\x00".raw)
    Uniform4iv               = autocast getProcAddress("glUniform4iv\x00".raw)
    UniformMatrix2fv         = autocast getProcAddress("glUniformMatrix2fv\x00".raw)
    UniformMatrix3fv         = autocast getProcAddress("glUniformMatrix3fv\x00".raw)
    UniformMatrix4fv         = autocast getProcAddress("glUniformMatrix4fv\x00".raw)
    ValidateProgram          = autocast getProcAddress("glValidateProgram\x00".raw)
    VertexAttrib1d           = autocast getProcAddress("glVertexAttrib1d\x00".raw)
    VertexAttrib1dv          = autocast getProcAddress("glVertexAttrib1dv\x00".raw)
    VertexAttrib1f           = autocast getProcAddress("glVertexAttrib1f\x00".raw)
    VertexAttrib1fv          = autocast getProcAddress("glVertexAttrib1fv\x00".raw)
    VertexAttrib1s           = autocast getProcAddress("glVertexAttrib1s\x00".raw)
    VertexAttrib1sv          = autocast getProcAddress("glVertexAttrib1sv\x00".raw)
    VertexAttrib2d           = autocast getProcAddress("glVertexAttrib2d\x00".raw)
    VertexAttrib2dv          = autocast getProcAddress("glVertexAttrib2dv\x00".raw)
    VertexAttrib2f           = autocast getProcAddress("glVertexAttrib2f\x00".raw)
    VertexAttrib2fv          = autocast getProcAddress("glVertexAttrib2fv\x00".raw)
    VertexAttrib2s           = autocast getProcAddress("glVertexAttrib2s\x00".raw)
    VertexAttrib2sv          = autocast getProcAddress("glVertexAttrib2sv\x00".raw)
    VertexAttrib3d           = autocast getProcAddress("glVertexAttrib3d\x00".raw)
    VertexAttrib3dv          = autocast getProcAddress("glVertexAttrib3dv\x00".raw)
    VertexAttrib3f           = autocast getProcAddress("glVertexAttrib3f\x00".raw)
    VertexAttrib3fv          = autocast getProcAddress("glVertexAttrib3fv\x00".raw)
    VertexAttrib3s           = autocast getProcAddress("glVertexAttrib3s\x00".raw)
    VertexAttrib3sv          = autocast getProcAddress("glVertexAttrib3sv\x00".raw)
    VertexAttrib4Nbv         = autocast getProcAddress("glVertexAttrib4Nbv\x00".raw)
    VertexAttrib4Niv         = autocast getProcAddress("glVertexAttrib4Niv\x00".raw)
    VertexAttrib4Nsv         = autocast getProcAddress("glVertexAttrib4Nsv\x00".raw)
    VertexAttrib4Nub         = autocast getProcAddress("glVertexAttrib4Nub\x00".raw)
    VertexAttrib4Nubv        = autocast getProcAddress("glVertexAttrib4Nubv\x00".raw)
    VertexAttrib4Nuiv        = autocast getProcAddress("glVertexAttrib4Nuiv\x00".raw)
    VertexAttrib4Nusv        = autocast getProcAddress("glVertexAttrib4Nusv\x00".raw)
    VertexAttrib4bv          = autocast getProcAddress("glVertexAttrib4bv\x00".raw)
    VertexAttrib4d           = autocast getProcAddress("glVertexAttrib4d\x00".raw)
    VertexAttrib4dv          = autocast getProcAddress("glVertexAttrib4dv\x00".raw)
    VertexAttrib4f           = autocast getProcAddress("glVertexAttrib4f\x00".raw)
    VertexAttrib4fv          = autocast getProcAddress("glVertexAttrib4fv\x00".raw)
    VertexAttrib4iv          = autocast getProcAddress("glVertexAttrib4iv\x00".raw)
    VertexAttrib4s           = autocast getProcAddress("glVertexAttrib4s\x00".raw)
    VertexAttrib4sv          = autocast getProcAddress("glVertexAttrib4sv\x00".raw)
    VertexAttrib4ubv         = autocast getProcAddress("glVertexAttrib4ubv\x00".raw)
    VertexAttrib4uiv         = autocast getProcAddress("glVertexAttrib4uiv\x00".raw)
    VertexAttrib4usv         = autocast getProcAddress("glVertexAttrib4usv\x00".raw)
    VertexAttribPointer      = autocast getProcAddress("glVertexAttribPointer\x00".raw)
}


// VERSION_2_1
UniformMatrix2x3fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix3x2fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix2x4fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix4x2fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix3x4fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void
UniformMatrix4x3fv: (location: i32, count: i32, transpose: u8, value: *f32) -> void

load2_1 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    UniformMatrix2x3fv = autocast getProcAddress("glUniformMatrix2x3fv\x00".raw)
    UniformMatrix3x2fv = autocast getProcAddress("glUniformMatrix3x2fv\x00".raw)
    UniformMatrix2x4fv = autocast getProcAddress("glUniformMatrix2x4fv\x00".raw)
    UniformMatrix4x2fv = autocast getProcAddress("glUniformMatrix4x2fv\x00".raw)
    UniformMatrix3x4fv = autocast getProcAddress("glUniformMatrix3x4fv\x00".raw)
    UniformMatrix4x3fv = autocast getProcAddress("glUniformMatrix4x3fv\x00".raw)
}


// VERSION_3_0
ColorMaski:                          (index: u32, r: u8, g: u8, b: u8, a: u8) -> void
GetBooleani_v:                       (target: u32, index: u32, data: *u8) -> void
Geti32egeri_v:                       (target: u32, index: u32, data: *i32) -> void
Enablei:                             (target: u32, index: u32) -> void
Disablei:                            (target: u32, index: u32) -> void
IsEnabledi:                          (target: u32, index: u32) -> u8
Begi32ransformFeedback:              (primitiveMode: u32) -> void
EndTransformFeedback:                () -> void
BindBufferRange:                     (target: u32, index: u32, buffer: u32, offset: i32, size: i32) -> void
BindBufferBase:                      (target: u32, index: u32, buffer: u32) -> void
TransformFeedbackVaryings:           (program: u32, count: i32, varyings: *u8, bufferMode: u32) -> void
GetTransformFeedbackVarying:         (program: u32, index: u32, bufSize: i32, length: *i32, size: *i32, type_: *u32, name: *u8) -> void
ClampColor:                          (target: u32, clamp: u32) -> void
BeginConditionalRender:              (id: u32, mode: u32) -> void
EndConditionalRender:                () -> void
VertexAttribIPointer:                (index: u32, size: i32, type_: u32, stride: i32, poi32er: rawptr) -> void
GetVertexAttribIiv:                  (index: u32, pname: u32, params: *i32) -> void
GetVertexAttribIuiv:                 (index: u32, pname: u32, params: *u32) -> void
VertexAttribI1i:                     (index: u32, x: i32) -> void
VertexAttribI2i:                     (index: u32, x: i32, y: i32) -> void
VertexAttribI3i:                     (index: u32, x: i32, y: i32, z: i32) -> void
VertexAttribI4i:                     (index: u32, x: i32, y: i32, z: i32, w: i32) -> void
VertexAttribI1ui:                    (index: u32, x: u32) -> void
VertexAttribI2ui:                    (index: u32, x: u32, y: u32) -> void
VertexAttribI3ui:                    (index: u32, x: u32, y: u32, z: u32) -> void
VertexAttribI4ui:                    (index: u32, x: u32, y: u32, z: u32, w: u32) -> void
VertexAttribI1iv:                    (index: u32, v: *i32) -> void
VertexAttribI2iv:                    (index: u32, v: *i32) -> void
VertexAttribI3iv:                    (index: u32, v: *i32) -> void
VertexAttribI4iv:                    (index: u32, v: *i32) -> void
VertexAttribI1uiv:                   (index: u32, v: *u32) -> void
VertexAttribI2uiv:                   (index: u32, v: *u32) -> void
VertexAttribI3uiv:                   (index: u32, v: *u32) -> void
VertexAttribI4uiv:                   (index: u32, v: *u32) -> void
VertexAttribI4bv:                    (index: u32, v: *i8) -> void
VertexAttribI4sv:                    (index: u32, v: *i16) -> void
VertexAttribI4ubv:                   (index: u32, v: *u8) -> void
VertexAttribI4usv:                   (index: u32, v: *u16) -> void
GetUniformuiv:                       (program: u32, location: i32, params: *u32) -> void
BindFragDataLocation:                (program: u32, color: u32, name: *u8) -> void
GetFragDataLocation:                 (program: u32, name: *u8) -> i32
Uniform1ui:                          (location: i32, v0: u32) -> void
Uniform2ui:                          (location: i32, v0: u32, v1: u32) -> void
Uniform3ui:                          (location: i32, v0: u32, v1: u32, v2: u32) -> void
Uniform4ui:                          (location: i32, v0: u32, v1: u32, v2: u32, v3: u32) -> void
Uniform1uiv:                         (location: i32, count: i32, value: *u32) -> void
Uniform2uiv:                         (location: i32, count: i32, value: *u32) -> void
Uniform3uiv:                         (location: i32, count: i32, value: *u32) -> void
Uniform4uiv:                         (location: i32, count: i32, value: *u32) -> void
TexParameterIiv:                     (target: u32, pname: u32, params: *i32) -> void
TexParameterIuiv:                    (target: u32, pname: u32, params: *u32) -> void
GetTexParameterIiv:                  (target: u32, pname: u32, params: *i32) -> void
GetTexParameterIuiv:                 (target: u32, pname: u32, params: *u32) -> void
ClearBufferiv:                       (buffer: u32, drawbuffer: i32, value: *i32) -> void
ClearBufferuiv:                      (buffer: u32, drawbuffer: i32, value: *u32) -> void
ClearBufferfv:                       (buffer: u32, drawbuffer: i32, value: *f32) -> void
ClearBufferfi:                       (buffer: u32, drawbuffer: i32, depth: f32, stencil: i32) -> rawptr
GetStringi:                          (name: u32, index: u32) -> u8
IsRenderbuffer:                      (renderbuffer: u32) -> u8
BindRenderbuffer:                    (target: u32, renderbuffer: u32) -> void
DeleteRenderbuffers:                 (n: i32, renderbuffers: *u32) -> void
GenRenderbuffers:                    (n: i32, renderbuffers: *u32) -> void
RenderbufferStorage:                 (target: u32, i32ernalformat: u32, width: i32, height: i32) -> void
GetRenderbufferParameteriv:          (target: u32, pname: u32, params: *i32) -> void
IsFramebuffer:                       (framebuffer: u32) -> u8
BindFramebuffer:                     (target: u32, framebuffer: u32) -> void
DeleteFramebuffers:                  (n: i32, framebuffers: *u32) -> void
GenFramebuffers:                     (n: i32, framebuffers: *u32) -> void
CheckFramebufferStatus:              (target: u32) -> u32
FramebufferTexture1D:                (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) -> void
FramebufferTexture2D:                (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32) -> void
FramebufferTexture3D:                (target: u32, attachment: u32, textarget: u32, texture: u32, level: i32, zoffset: i32) -> void
FramebufferRenderbuffer:             (target: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) -> void
GetFramebufferAttachmentParameteriv: (target: u32, attachment: u32, pname: u32, params: *i32) -> void
GenerateMipmap:                      (target: u32) -> void
BlitFramebuffer:                     (srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32) -> void
RenderbufferStorageMultisample:      (target: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32) -> void
FramebufferTextureLayer:             (target: u32, attachment: u32, texture: u32, level: i32, layer: i32) -> void
MapBufferRange:                      (target: u32, offset: i32, length: i32, access: u32) -> rawptr
FlushMappedBufferRange:              (target: u32, offset: i32, length: i32) -> void
BindVertexArray:                     (array: u32) -> void
DeleteVertexArrays:                  (n: i32, arrays: *u32) -> void
GenVertexArrays:                     (n: i32, arrays: *u32) -> void
IsVertexArray:                       (array: u32) -> u8

load3_0 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    ColorMaski                          = autocast getProcAddress("glColorMaski\x00".raw)
    GetBooleani_v                       = autocast getProcAddress("glGetBooleani_v\x00".raw)
    Geti32egeri_v                       = autocast getProcAddress("glGeti32egeri_v\x00".raw)
    Enablei                             = autocast getProcAddress("glEnablei\x00".raw)
    Disablei                            = autocast getProcAddress("glDisablei\x00".raw)
    IsEnabledi                          = autocast getProcAddress("glIsEnabledi\x00".raw)
    Begi32ransformFeedback              = autocast getProcAddress("glBegi32ransformFeedback\x00".raw)
    EndTransformFeedback                = autocast getProcAddress("glEndTransformFeedback\x00".raw)
    BindBufferRange                     = autocast getProcAddress("glBindBufferRange\x00".raw)
    BindBufferBase                      = autocast getProcAddress("glBindBufferBase\x00".raw)
    TransformFeedbackVaryings           = autocast getProcAddress("glTransformFeedbackVaryings\x00".raw)
    GetTransformFeedbackVarying         = autocast getProcAddress("glGetTransformFeedbackVarying\x00".raw)
    ClampColor                          = autocast getProcAddress("glClampColor\x00".raw)
    BeginConditionalRender              = autocast getProcAddress("glBeginConditionalRender\x00".raw)
    EndConditionalRender                = autocast getProcAddress("glEndConditionalRender\x00".raw)
    VertexAttribIPointer                = autocast getProcAddress("glVertexAttribIPointer\x00".raw)
    GetVertexAttribIiv                  = autocast getProcAddress("glGetVertexAttribIiv\x00".raw)
    GetVertexAttribIuiv                 = autocast getProcAddress("glGetVertexAttribIuiv\x00".raw)
    VertexAttribI1i                     = autocast getProcAddress("glVertexAttribI1i\x00".raw)
    VertexAttribI2i                     = autocast getProcAddress("glVertexAttribI2i\x00".raw)
    VertexAttribI3i                     = autocast getProcAddress("glVertexAttribI3i\x00".raw)
    VertexAttribI4i                     = autocast getProcAddress("glVertexAttribI4i\x00".raw)
    VertexAttribI1ui                    = autocast getProcAddress("glVertexAttribI1ui\x00".raw)
    VertexAttribI2ui                    = autocast getProcAddress("glVertexAttribI2ui\x00".raw)
    VertexAttribI3ui                    = autocast getProcAddress("glVertexAttribI3ui\x00".raw)
    VertexAttribI4ui                    = autocast getProcAddress("glVertexAttribI4ui\x00".raw)
    VertexAttribI1iv                    = autocast getProcAddress("glVertexAttribI1iv\x00".raw)
    VertexAttribI2iv                    = autocast getProcAddress("glVertexAttribI2iv\x00".raw)
    VertexAttribI3iv                    = autocast getProcAddress("glVertexAttribI3iv\x00".raw)
    VertexAttribI4iv                    = autocast getProcAddress("glVertexAttribI4iv\x00".raw)
    VertexAttribI1uiv                   = autocast getProcAddress("glVertexAttribI1uiv\x00".raw)
    VertexAttribI2uiv                   = autocast getProcAddress("glVertexAttribI2uiv\x00".raw)
    VertexAttribI3uiv                   = autocast getProcAddress("glVertexAttribI3uiv\x00".raw)
    VertexAttribI4uiv                   = autocast getProcAddress("glVertexAttribI4uiv\x00".raw)
    VertexAttribI4bv                    = autocast getProcAddress("glVertexAttribI4bv\x00".raw)
    VertexAttribI4sv                    = autocast getProcAddress("glVertexAttribI4sv\x00".raw)
    VertexAttribI4ubv                   = autocast getProcAddress("glVertexAttribI4ubv\x00".raw)
    VertexAttribI4usv                   = autocast getProcAddress("glVertexAttribI4usv\x00".raw)
    GetUniformuiv                       = autocast getProcAddress("glGetUniformuiv\x00".raw)
    BindFragDataLocation                = autocast getProcAddress("glBindFragDataLocation\x00".raw)
    GetFragDataLocation                 = autocast getProcAddress("glGetFragDataLocation\x00".raw)
    Uniform1ui                          = autocast getProcAddress("glUniform1ui\x00".raw)
    Uniform2ui                          = autocast getProcAddress("glUniform2ui\x00".raw)
    Uniform3ui                          = autocast getProcAddress("glUniform3ui\x00".raw)
    Uniform4ui                          = autocast getProcAddress("glUniform4ui\x00".raw)
    Uniform1uiv                         = autocast getProcAddress("glUniform1uiv\x00".raw)
    Uniform2uiv                         = autocast getProcAddress("glUniform2uiv\x00".raw)
    Uniform3uiv                         = autocast getProcAddress("glUniform3uiv\x00".raw)
    Uniform4uiv                         = autocast getProcAddress("glUniform4uiv\x00".raw)
    TexParameterIiv                     = autocast getProcAddress("glTexParameterIiv\x00".raw)
    TexParameterIuiv                    = autocast getProcAddress("glTexParameterIuiv\x00".raw)
    GetTexParameterIiv                  = autocast getProcAddress("glGetTexParameterIiv\x00".raw)
    GetTexParameterIuiv                 = autocast getProcAddress("glGetTexParameterIuiv\x00".raw)
    ClearBufferiv                       = autocast getProcAddress("glClearBufferiv\x00".raw)
    ClearBufferuiv                      = autocast getProcAddress("glClearBufferuiv\x00".raw)
    ClearBufferfv                       = autocast getProcAddress("glClearBufferfv\x00".raw)
    ClearBufferfi                       = autocast getProcAddress("glClearBufferfi\x00".raw)
    GetStringi                          = autocast getProcAddress("glGetStringi\x00".raw)
    IsRenderbuffer                      = autocast getProcAddress("glIsRenderbuffer\x00".raw)
    BindRenderbuffer                    = autocast getProcAddress("glBindRenderbuffer\x00".raw)
    DeleteRenderbuffers                 = autocast getProcAddress("glDeleteRenderbuffers\x00".raw)
    GenRenderbuffers                    = autocast getProcAddress("glGenRenderbuffers\x00".raw)
    RenderbufferStorage                 = autocast getProcAddress("glRenderbufferStorage\x00".raw)
    GetRenderbufferParameteriv          = autocast getProcAddress("glGetRenderbufferParameteriv\x00".raw)
    IsFramebuffer                       = autocast getProcAddress("glIsFramebuffer\x00".raw)
    BindFramebuffer                     = autocast getProcAddress("glBindFramebuffer\x00".raw)
    DeleteFramebuffers                  = autocast getProcAddress("glDeleteFramebuffers\x00".raw)
    GenFramebuffers                     = autocast getProcAddress("glGenFramebuffers\x00".raw)
    CheckFramebufferStatus              = autocast getProcAddress("glCheckFramebufferStatus\x00".raw)
    FramebufferTexture1D                = autocast getProcAddress("glFramebufferTexture1D\x00".raw)
    FramebufferTexture2D                = autocast getProcAddress("glFramebufferTexture2D\x00".raw)
    FramebufferTexture3D                = autocast getProcAddress("glFramebufferTexture3D\x00".raw)
    FramebufferRenderbuffer             = autocast getProcAddress("glFramebufferRenderbuffer\x00".raw)
    GetFramebufferAttachmentParameteriv = autocast getProcAddress("glGetFramebufferAttachmentParameteriv\x00".raw)
    GenerateMipmap                      = autocast getProcAddress("glGenerateMipmap\x00".raw)
    BlitFramebuffer                     = autocast getProcAddress("glBlitFramebuffer\x00".raw)
    RenderbufferStorageMultisample      = autocast getProcAddress("glRenderbufferStorageMultisample\x00".raw)
    FramebufferTextureLayer             = autocast getProcAddress("glFramebufferTextureLayer\x00".raw)
    MapBufferRange                      = autocast getProcAddress("glMapBufferRange\x00".raw)
    FlushMappedBufferRange              = autocast getProcAddress("glFlushMappedBufferRange\x00".raw)
    BindVertexArray                     = autocast getProcAddress("glBindVertexArray\x00".raw)
    DeleteVertexArrays                  = autocast getProcAddress("glDeleteVertexArrays\x00".raw)
    GenVertexArrays                     = autocast getProcAddress("glGenVertexArrays\x00".raw)
    IsVertexArray                       = autocast getProcAddress("glIsVertexArray\x00".raw)
}


// VERSION_3_1
DrawArraysInstanced:       (mode: u32, first: i32, count: i32, instancecount: i32) -> void
DrawElementsInstanced:     (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32) -> void
TexBuffer:                 (target: u32, i32ernalformat: u32, buffer: u32) -> void
PrimitiveRestartIndex:     (index: u32) -> void
CopyBufferSubData:         (readTarget: u32, writeTarget: u32, readOffset: i32, writeOffset: i32, size: i32) -> void
GetUniformIndices:         (program: u32, uniformCount: i32, uniformNames: *u8, uniformIndices: *u32) -> void
GetActiveUniformsiv:       (program: u32, uniformCount: i32, uniformIndices: *u32, pname: u32, params: *i32) -> void
GetActiveUniformName:      (program: u32, uniformIndex: u32, bufSize: i32, length: *i32, uniformName: *u8) -> void
GetUniformBlockIndex:      (program: u32, uniformBlockName: *u8) -> u32
GetActiveUniformBlockiv:   (program: u32, uniformBlockIndex: u32, pname: u32, params: *i32) -> void
GetActiveUniformBlockName: (program: u32, uniformBlockIndex: u32, bufSize: i32, length: *i32, uniformBlockName: *u8) -> void
UniformBlockBinding:       (program: u32, uniformBlockIndex: u32, uniformBlockBinding: u32) -> void

load3_1 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    DrawArraysInstanced       = autocast getProcAddress("glDrawArraysInstanced\x00".raw)
    DrawElementsInstanced     = autocast getProcAddress("glDrawElementsInstanced\x00".raw)
    TexBuffer                 = autocast getProcAddress("glTexBuffer\x00".raw)
    PrimitiveRestartIndex     = autocast getProcAddress("glPrimitiveRestartIndex\x00".raw)
    CopyBufferSubData         = autocast getProcAddress("glCopyBufferSubData\x00".raw)
    GetUniformIndices         = autocast getProcAddress("glGetUniformIndices\x00".raw)
    GetActiveUniformsiv       = autocast getProcAddress("glGetActiveUniformsiv\x00".raw)
    GetActiveUniformName      = autocast getProcAddress("glGetActiveUniformName\x00".raw)
    GetUniformBlockIndex      = autocast getProcAddress("glGetUniformBlockIndex\x00".raw)
    GetActiveUniformBlockiv   = autocast getProcAddress("glGetActiveUniformBlockiv\x00".raw)
    GetActiveUniformBlockName = autocast getProcAddress("glGetActiveUniformBlockName\x00".raw)
    UniformBlockBinding       = autocast getProcAddress("glUniformBlockBinding\x00".raw)
}


// VERSION_3_2
DrawElementsBaseVertex:          (mode: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32) -> void
DrawRangeElementsBaseVertex:     (mode: u32, start: u32, end: u32, count: i32, type_: u32, indices: rawptr, basevertex: i32) -> void
DrawElementsInstancedBaseVertex: (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, basevertex: i32) -> void
MultiDrawElementsBaseVertex:     (mode: u32, count: *i32, type_: u32, indices: *rawptr, drawcount: i32, basevertex: *i32) -> void
ProvokingVertex:                 (mode: u32) -> void
FenceSync:                       (condition: u32, flags: u32) -> sync_t
IsSync:                          (sync: sync_t) -> u8
DeleteSync:                      (sync: sync_t) -> void
ClientWaitSync:                  (sync: sync_t, flags: u32, timeout: u64) -> u32
WaitSync:                        (sync: sync_t, flags: u32, timeout: u64) -> void
Geti32eger64v:                   (pname: u32, data: *i64) -> void
GetSynciv:                       (sync: sync_t, pname: u32, bufSize: i32, length: *i32, values: *i32) -> void
Geti32eger64i_v:                 (target: u32, index: u32, data: *i64) -> void
GetBufferParameteri64v:          (target: u32, pname: u32, params: *i64) -> void
FramebufferTexture:              (target: u32, attachment: u32, texture: u32, level: i32) -> void
TexImage2DMultisample:           (target: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, fixedsamplelocations: u8) -> void
TexImage3DMultisample:           (target: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) -> void
GetMultisamplefv:                (pname: u32, index: u32, val: *f32) -> void
SampleMaski:                     (maskNumber: u32, mask: u32) -> void

load3_2 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    DrawElementsBaseVertex          = autocast getProcAddress("glDrawElementsBaseVertex\x00".raw)
    DrawRangeElementsBaseVertex     = autocast getProcAddress("glDrawRangeElementsBaseVertex\x00".raw)
    DrawElementsInstancedBaseVertex = autocast getProcAddress("glDrawElementsInstancedBaseVertex\x00".raw)
    MultiDrawElementsBaseVertex     = autocast getProcAddress("glMultiDrawElementsBaseVertex\x00".raw)
    ProvokingVertex                 = autocast getProcAddress("glProvokingVertex\x00".raw)
    FenceSync                       = autocast getProcAddress("glFenceSync\x00".raw)
    IsSync                          = autocast getProcAddress("glIsSync\x00".raw)
    DeleteSync                      = autocast getProcAddress("glDeleteSync\x00".raw)
    ClientWaitSync                  = autocast getProcAddress("glClientWaitSync\x00".raw)
    WaitSync                        = autocast getProcAddress("glWaitSync\x00".raw)
    Geti32eger64v                   = autocast getProcAddress("glGeti32eger64v\x00".raw)
    GetSynciv                       = autocast getProcAddress("glGetSynciv\x00".raw)
    Geti32eger64i_v                 = autocast getProcAddress("glGeti32eger64i_v\x00".raw)
    GetBufferParameteri64v          = autocast getProcAddress("glGetBufferParameteri64v\x00".raw)
    FramebufferTexture              = autocast getProcAddress("glFramebufferTexture\x00".raw)
    TexImage2DMultisample           = autocast getProcAddress("glTexImage2DMultisample\x00".raw)
    TexImage3DMultisample           = autocast getProcAddress("glTexImage3DMultisample\x00".raw)
    GetMultisamplefv                = autocast getProcAddress("glGetMultisamplefv\x00".raw)
    SampleMaski                     = autocast getProcAddress("glSampleMaski\x00".raw)
}


// VERSION_3_3
BindFragDataLocationIndexed: (program: u32, colorNumber: u32, index: u32, name: *u8) -> void
GetFragDataIndex:            (program: u32, name: *u8) -> i32
GenSamplers:                 (count: i32, samplers: *u32) -> void
DeleteSamplers:              (count: i32, samplers: *u32) -> void
IsSampler:                   (sampler: u32) -> u8
BindSampler:                 (unit: u32, sampler: u32) -> void
SamplerParameteri:           (sampler: u32, pname: u32, param: i32) -> void
SamplerParameteriv:          (sampler: u32, pname: u32, param: *i32) -> void
SamplerParameterf:           (sampler: u32, pname: u32, param: f32) -> void
SamplerParameterfv:          (sampler: u32, pname: u32, param: *f32) -> void
SamplerParameterIiv:         (sampler: u32, pname: u32, param: *i32) -> void
SamplerParameterIuiv:        (sampler: u32, pname: u32, param: *u32) -> void
GetSamplerParameteriv:       (sampler: u32, pname: u32, params: *i32) -> void
GetSamplerParameterIiv:      (sampler: u32, pname: u32, params: *i32) -> void
GetSamplerParameterfv:       (sampler: u32, pname: u32, params: *f32) -> void
GetSamplerParameterIuiv:     (sampler: u32, pname: u32, params: *u32) -> void
QueryCounter:                (id: u32, target: u32) -> void
GetQueryObjecti64v:          (id: u32, pname: u32, params: *i64) -> void
GetQueryObjectui64v:         (id: u32, pname: u32, params: *u64) -> void
VertexAttribDivisor:         (index: u32, divisor: u32) -> void
VertexAttribP1ui:            (index: u32, type_: u32, normalized: u8, value: u32) -> void
VertexAttribP1uiv:           (index: u32, type_: u32, normalized: u8, value: *u32) -> void
VertexAttribP2ui:            (index: u32, type_: u32, normalized: u8, value: u32) -> void
VertexAttribP2uiv:           (index: u32, type_: u32, normalized: u8, value: *u32) -> void
VertexAttribP3ui:            (index: u32, type_: u32, normalized: u8, value: u32) -> void
VertexAttribP3uiv:           (index: u32, type_: u32, normalized: u8, value: *u32) -> void
VertexAttribP4ui:            (index: u32, type_: u32, normalized: u8, value: u32) -> void
VertexAttribP4uiv:           (index: u32, type_: u32, normalized: u8, value: *u32) -> void
VertexP2ui:                  (type_: u32, value: u32) -> void
VertexP2uiv:                 (type_: u32, value: *u32) -> void
VertexP3ui:                  (type_: u32, value: u32) -> void
VertexP3uiv:                 (type_: u32, value: *u32) -> void
VertexP4ui:                  (type_: u32, value: u32) -> void
VertexP4uiv:                 (type_: u32, value: *u32) -> void
TexCoordP1ui:                (type_: u32, coords: u32) -> void
TexCoordP1uiv:               (type_: u32, coords: *u32) -> void
TexCoordP2ui:                (type_: u32, coords: u32) -> void
TexCoordP2uiv:               (type_: u32, coords: *u32) -> void
TexCoordP3ui:                (type_: u32, coords: u32) -> void
TexCoordP3uiv:               (type_: u32, coords: *u32) -> void
TexCoordP4ui:                (type_: u32, coords: u32) -> void
TexCoordP4uiv:               (type_: u32, coords: *u32) -> void
MultiTexCoordP1ui:           (texture: u32, type_: u32, coords: u32) -> void
MultiTexCoordP1uiv:          (texture: u32, type_: u32, coords: *u32) -> void
MultiTexCoordP2ui:           (texture: u32, type_: u32, coords: u32) -> void
MultiTexCoordP2uiv:          (texture: u32, type_: u32, coords: *u32) -> void
MultiTexCoordP3ui:           (texture: u32, type_: u32, coords: u32) -> void
MultiTexCoordP3uiv:          (texture: u32, type_: u32, coords: *u32) -> void
MultiTexCoordP4ui:           (texture: u32, type_: u32, coords: u32) -> void
MultiTexCoordP4uiv:          (texture: u32, type_: u32, coords: *u32) -> void
NormalP3ui:                  (type_: u32, coords: u32) -> void
NormalP3uiv:                 (type_: u32, coords: *u32) -> void
ColorP3ui:                   (type_: u32, color: u32) -> void
ColorP3uiv:                  (type_: u32, color: *u32) -> void
ColorP4ui:                   (type_: u32, color: u32) -> void
ColorP4uiv:                  (type_: u32, color: *u32) -> void
SecondaryColorP3ui:          (type_: u32, color: u32) -> void
SecondaryColorP3uiv:         (type_: u32, color: *u32) -> void

load3_3 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    BindFragDataLocationIndexed = autocast getProcAddress("glBindFragDataLocationIndexed\x00".raw)
    GetFragDataIndex            = autocast getProcAddress("glGetFragDataIndex\x00".raw)
    GenSamplers                 = autocast getProcAddress("glGenSamplers\x00".raw)
    DeleteSamplers              = autocast getProcAddress("glDeleteSamplers\x00".raw)
    IsSampler                   = autocast getProcAddress("glIsSampler\x00".raw)
    BindSampler                 = autocast getProcAddress("glBindSampler\x00".raw)
    SamplerParameteri           = autocast getProcAddress("glSamplerParameteri\x00".raw)
    SamplerParameteriv          = autocast getProcAddress("glSamplerParameteriv\x00".raw)
    SamplerParameterf           = autocast getProcAddress("glSamplerParameterf\x00".raw)
    SamplerParameterfv          = autocast getProcAddress("glSamplerParameterfv\x00".raw)
    SamplerParameterIiv         = autocast getProcAddress("glSamplerParameterIiv\x00".raw)
    SamplerParameterIuiv        = autocast getProcAddress("glSamplerParameterIuiv\x00".raw)
    GetSamplerParameteriv       = autocast getProcAddress("glGetSamplerParameteriv\x00".raw)
    GetSamplerParameterIiv      = autocast getProcAddress("glGetSamplerParameterIiv\x00".raw)
    GetSamplerParameterfv       = autocast getProcAddress("glGetSamplerParameterfv\x00".raw)
    GetSamplerParameterIuiv     = autocast getProcAddress("glGetSamplerParameterIuiv\x00".raw)
    QueryCounter                = autocast getProcAddress("glQueryCounter\x00".raw)
    GetQueryObjecti64v          = autocast getProcAddress("glGetQueryObjecti64v\x00".raw)
    GetQueryObjectui64v         = autocast getProcAddress("glGetQueryObjectui64v\x00".raw)
    VertexAttribDivisor         = autocast getProcAddress("glVertexAttribDivisor\x00".raw)
    VertexAttribP1ui            = autocast getProcAddress("glVertexAttribP1ui\x00".raw)
    VertexAttribP1uiv           = autocast getProcAddress("glVertexAttribP1uiv\x00".raw)
    VertexAttribP2ui            = autocast getProcAddress("glVertexAttribP2ui\x00".raw)
    VertexAttribP2uiv           = autocast getProcAddress("glVertexAttribP2uiv\x00".raw)
    VertexAttribP3ui            = autocast getProcAddress("glVertexAttribP3ui\x00".raw)
    VertexAttribP3uiv           = autocast getProcAddress("glVertexAttribP3uiv\x00".raw)
    VertexAttribP4ui            = autocast getProcAddress("glVertexAttribP4ui\x00".raw)
    VertexAttribP4uiv           = autocast getProcAddress("glVertexAttribP4uiv\x00".raw)
    VertexP2ui                  = autocast getProcAddress("glVertexP2ui\x00".raw)
    VertexP2uiv                 = autocast getProcAddress("glVertexP2uiv\x00".raw)
    VertexP3ui                  = autocast getProcAddress("glVertexP3ui\x00".raw)
    VertexP3uiv                 = autocast getProcAddress("glVertexP3uiv\x00".raw)
    VertexP4ui                  = autocast getProcAddress("glVertexP4ui\x00".raw)
    VertexP4uiv                 = autocast getProcAddress("glVertexP4uiv\x00".raw)
    TexCoordP1ui                = autocast getProcAddress("glTexCoordP1ui\x00".raw)
    TexCoordP1uiv               = autocast getProcAddress("glTexCoordP1uiv\x00".raw)
    TexCoordP2ui                = autocast getProcAddress("glTexCoordP2ui\x00".raw)
    TexCoordP2uiv               = autocast getProcAddress("glTexCoordP2uiv\x00".raw)
    TexCoordP3ui                = autocast getProcAddress("glTexCoordP3ui\x00".raw)
    TexCoordP3uiv               = autocast getProcAddress("glTexCoordP3uiv\x00".raw)
    TexCoordP4ui                = autocast getProcAddress("glTexCoordP4ui\x00".raw)
    TexCoordP4uiv               = autocast getProcAddress("glTexCoordP4uiv\x00".raw)
    MultiTexCoordP1ui           = autocast getProcAddress("glMultiTexCoordP1ui\x00".raw)
    MultiTexCoordP1uiv          = autocast getProcAddress("glMultiTexCoordP1uiv\x00".raw)
    MultiTexCoordP2ui           = autocast getProcAddress("glMultiTexCoordP2ui\x00".raw)
    MultiTexCoordP2uiv          = autocast getProcAddress("glMultiTexCoordP2uiv\x00".raw)
    MultiTexCoordP3ui           = autocast getProcAddress("glMultiTexCoordP3ui\x00".raw)
    MultiTexCoordP3uiv          = autocast getProcAddress("glMultiTexCoordP3uiv\x00".raw)
    MultiTexCoordP4ui           = autocast getProcAddress("glMultiTexCoordP4ui\x00".raw)
    MultiTexCoordP4uiv          = autocast getProcAddress("glMultiTexCoordP4uiv\x00".raw)
    NormalP3ui                  = autocast getProcAddress("glNormalP3ui\x00".raw)
    NormalP3uiv                 = autocast getProcAddress("glNormalP3uiv\x00".raw)
    ColorP3ui                   = autocast getProcAddress("glColorP3ui\x00".raw)
    ColorP3uiv                  = autocast getProcAddress("glColorP3uiv\x00".raw)
    ColorP4ui                   = autocast getProcAddress("glColorP4ui\x00".raw)
    ColorP4uiv                  = autocast getProcAddress("glColorP4uiv\x00".raw)
    SecondaryColorP3ui          = autocast getProcAddress("glSecondaryColorP3ui\x00".raw)
    SecondaryColorP3uiv         = autocast getProcAddress("glSecondaryColorP3uiv\x00".raw)
}


// VERSION_4_0
MinSampleShading:               (value: f32) -> void
BlendEquationi:                 (buf: u32, mode: u32) -> void
BlendEquationSeparatei:         (buf: u32, modeRGB: u32, modeAlpha: u32) -> void
BlendFunci:                     (buf: u32, src: u32, dst: u32) -> void
BlendFuncSeparatei:             (buf: u32, srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32) -> void
DrawArraysIndirect:             (mode: u32, indirect: rawptr) -> void
DrawElementsIndirect:           (mode: u32, type_: u32, indirect: rawptr) -> void
Uniform1d:                      (location: i32, x: f64) -> void
Uniform2d:                      (location: i32, x: f64, y: f64) -> void
Uniform3d:                      (location: i32, x: f64, y: f64, z: f64) -> void
Uniform4d:                      (location: i32, x: f64, y: f64, z: f64, w: f64) -> void
Uniform1dv:                     (location: i32, count: i32, value: *f64) -> void
Uniform2dv:                     (location: i32, count: i32, value: *f64) -> void
Uniform3dv:                     (location: i32, count: i32, value: *f64) -> void
Uniform4dv:                     (location: i32, count: i32, value: *f64) -> void
UniformMatrix2dv:               (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix3dv:               (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix4dv:               (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix2x3dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix2x4dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix3x2dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix3x4dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix4x2dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
UniformMatrix4x3dv:             (location: i32, count: i32, transpose: u8, value: *f64) -> void
GetUniformdv:                   (program: u32, location: i32, params: *f64) -> void
GetSubroutineUniformLocation:   (program: u32, shadertype_: u32, name: *u8) -> i32
GetSubroutineIndex:             (program: u32, shadertype_: u32, name: *u8) -> u32
GetActiveSubroutineUniformiv:   (program: u32, shadertype_: u32, index: u32, pname: u32, values: *i32) -> void
GetActiveSubroutineUniformName: (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: *i32, name: *u8) -> void
GetActiveSubroutineName:        (program: u32, shadertype_: u32, index: u32, bufsize: i32, length: *i32, name: *u8) -> void
UniformSubroutinesuiv:          (shadertype_: u32, count: i32, indices: *u32) -> void
GetUniformSubroutineuiv:        (shadertype_: u32, location: i32, params: *u32) -> void
GetProgramStageiv:              (program: u32, shadertype_: u32, pname: u32, values: *i32) -> void
PatchParameteri:                (pname: u32, value: i32) -> void
PatchParameterfv:               (pname: u32, values: *f32) -> void
BindTransformFeedback:          (target: u32, id: u32) -> void
DeleteTransformFeedbacks:       (n: i32, ids: *u32) -> void
GenTransformFeedbacks:          (n: i32, ids: *u32) -> void
IsTransformFeedback:            (id: u32) -> u8
PauseTransformFeedback:         () -> void
ResumeTransformFeedback:        () -> void
DrawTransformFeedback:          (mode: u32, id: u32) -> void
DrawTransformFeedbackStream:    (mode: u32, id: u32, stream: u32) -> void
BeginQueryIndexed:              (target: u32, index: u32, id: u32) -> void
EndQueryIndexed:                (target: u32, index: u32) -> void
GetQueryIndexediv:              (target: u32, index: u32, pname: u32, params: *i32) -> void

load4_0 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    MinSampleShading               = autocast getProcAddress("glMinSampleShading\x00".raw)
    BlendEquationi                 = autocast getProcAddress("glBlendEquationi\x00".raw)
    BlendEquationSeparatei         = autocast getProcAddress("glBlendEquationSeparatei\x00".raw)
    BlendFunci                     = autocast getProcAddress("glBlendFunci\x00".raw)
    BlendFuncSeparatei             = autocast getProcAddress("glBlendFuncSeparatei\x00".raw)
    DrawArraysIndirect             = autocast getProcAddress("glDrawArraysIndirect\x00".raw)
    DrawElementsIndirect           = autocast getProcAddress("glDrawElementsIndirect\x00".raw)
    Uniform1d                      = autocast getProcAddress("glUniform1d\x00".raw)
    Uniform2d                      = autocast getProcAddress("glUniform2d\x00".raw)
    Uniform3d                      = autocast getProcAddress("glUniform3d\x00".raw)
    Uniform4d                      = autocast getProcAddress("glUniform4d\x00".raw)
    Uniform1dv                     = autocast getProcAddress("glUniform1dv\x00".raw)
    Uniform2dv                     = autocast getProcAddress("glUniform2dv\x00".raw)
    Uniform3dv                     = autocast getProcAddress("glUniform3dv\x00".raw)
    Uniform4dv                     = autocast getProcAddress("glUniform4dv\x00".raw)
    UniformMatrix2dv               = autocast getProcAddress("glUniformMatrix2dv\x00".raw)
    UniformMatrix3dv               = autocast getProcAddress("glUniformMatrix3dv\x00".raw)
    UniformMatrix4dv               = autocast getProcAddress("glUniformMatrix4dv\x00".raw)
    UniformMatrix2x3dv             = autocast getProcAddress("glUniformMatrix2x3dv\x00".raw)
    UniformMatrix2x4dv             = autocast getProcAddress("glUniformMatrix2x4dv\x00".raw)
    UniformMatrix3x2dv             = autocast getProcAddress("glUniformMatrix3x2dv\x00".raw)
    UniformMatrix3x4dv             = autocast getProcAddress("glUniformMatrix3x4dv\x00".raw)
    UniformMatrix4x2dv             = autocast getProcAddress("glUniformMatrix4x2dv\x00".raw)
    UniformMatrix4x3dv             = autocast getProcAddress("glUniformMatrix4x3dv\x00".raw)
    GetUniformdv                   = autocast getProcAddress("glGetUniformdv\x00".raw)
    GetSubroutineUniformLocation   = autocast getProcAddress("glGetSubroutineUniformLocation\x00".raw)
    GetSubroutineIndex             = autocast getProcAddress("glGetSubroutineIndex\x00".raw)
    GetActiveSubroutineUniformiv   = autocast getProcAddress("glGetActiveSubroutineUniformiv\x00".raw)
    GetActiveSubroutineUniformName = autocast getProcAddress("glGetActiveSubroutineUniformName\x00".raw)
    GetActiveSubroutineName        = autocast getProcAddress("glGetActiveSubroutineName\x00".raw)
    UniformSubroutinesuiv          = autocast getProcAddress("glUniformSubroutinesuiv\x00".raw)
    GetUniformSubroutineuiv        = autocast getProcAddress("glGetUniformSubroutineuiv\x00".raw)
    GetProgramStageiv              = autocast getProcAddress("glGetProgramStageiv\x00".raw)
    PatchParameteri                = autocast getProcAddress("glPatchParameteri\x00".raw)
    PatchParameterfv               = autocast getProcAddress("glPatchParameterfv\x00".raw)
    BindTransformFeedback          = autocast getProcAddress("glBindTransformFeedback\x00".raw)
    DeleteTransformFeedbacks       = autocast getProcAddress("glDeleteTransformFeedbacks\x00".raw)
    GenTransformFeedbacks          = autocast getProcAddress("glGenTransformFeedbacks\x00".raw)
    IsTransformFeedback            = autocast getProcAddress("glIsTransformFeedback\x00".raw)
    PauseTransformFeedback         = autocast getProcAddress("glPauseTransformFeedback\x00".raw)
    ResumeTransformFeedback        = autocast getProcAddress("glResumeTransformFeedback\x00".raw)
    DrawTransformFeedback          = autocast getProcAddress("glDrawTransformFeedback\x00".raw)
    DrawTransformFeedbackStream    = autocast getProcAddress("glDrawTransformFeedbackStream\x00".raw)
    BeginQueryIndexed              = autocast getProcAddress("glBeginQueryIndexed\x00".raw)
    EndQueryIndexed                = autocast getProcAddress("glEndQueryIndexed\x00".raw)
    GetQueryIndexediv              = autocast getProcAddress("glGetQueryIndexediv\x00".raw)
}


// VERSION_4_1
ReleaseShaderCompiler:     () -> void
ShaderBinary:              (count: i32, shaders: *u32, binaryformat: u32, binary: rawptr, length: i32) -> void
GetShaderPrecisionFormat:  (shadertype_: u32, precisiontype_: u32, range: *i32, precision: *i32) -> void
DepthRangef:               (n: f32, f: f32) -> void
ClearDepthf:               (d: f32) -> void
GetProgramBinary:          (program: u32, bufSize: i32, length: *i32, binaryFormat: *u32, binary: rawptr) -> void
ProgramBinary:             (program: u32, binaryFormat: u32, binary: rawptr, length: i32) -> void
ProgramParameteri:         (program: u32, pname: u32, value: i32) -> void
UseProgramStages:          (pipeline: u32, stages: u32, program: u32) -> void
ActiveShaderProgram:       (pipeline: u32, program: u32) -> void
CreateShaderProgramv:      (type_: u32, count: i32, strings: *u8) -> u32
BindProgramPipeline:       (pipeline: u32) -> void
DeleteProgramPipelines:    (n: i32, pipelines: *u32) -> void
GenProgramPipelines:       (n: i32, pipelines: *u32) -> void
IsProgramPipeline:         (pipeline: u32) -> u8
GetProgramPipelineiv:      (pipeline: u32, pname: u32, params: *i32) -> void
ProgramUniform1i:          (program: u32, location: i32, v0: i32) -> void
ProgramUniform1iv:         (program: u32, location: i32, count: i32, value: *i32) -> void
ProgramUniform1f:          (program: u32, location: i32, v0: f32) -> void
ProgramUniform1fv:         (program: u32, location: i32, count: i32, value: *f32) -> void
ProgramUniform1d:          (program: u32, location: i32, v0: f64) -> void
ProgramUniform1dv:         (program: u32, location: i32, count: i32, value: *f64) -> void
ProgramUniform1ui:         (program: u32, location: i32, v0: u32) -> void
ProgramUniform1uiv:        (program: u32, location: i32, count: i32, value: *u32) -> void
ProgramUniform2i:          (program: u32, location: i32, v0: i32, v1: i32) -> void
ProgramUniform2iv:         (program: u32, location: i32, count: i32, value: *i32) -> void
ProgramUniform2f:          (program: u32, location: i32, v0: f32, v1: f32) -> void
ProgramUniform2fv:         (program: u32, location: i32, count: i32, value: *f32) -> void
ProgramUniform2d:          (program: u32, location: i32, v0: f64, v1: f64) -> void
ProgramUniform2dv:         (program: u32, location: i32, count: i32, value: *f64) -> void
ProgramUniform2ui:         (program: u32, location: i32, v0: u32, v1: u32) -> void
ProgramUniform2uiv:        (program: u32, location: i32, count: i32, value: *u32) -> void
ProgramUniform3i:          (program: u32, location: i32, v0: i32, v1: i32, v2: i32) -> void
ProgramUniform3iv:         (program: u32, location: i32, count: i32, value: *i32) -> void
ProgramUniform3f:          (program: u32, location: i32, v0: f32, v1: f32, v2: f32) -> void
ProgramUniform3fv:         (program: u32, location: i32, count: i32, value: *f32) -> void
ProgramUniform3d:          (program: u32, location: i32, v0: f64, v1: f64, v2: f64) -> void
ProgramUniform3dv:         (program: u32, location: i32, count: i32, value: *f64) -> void
ProgramUniform3ui:         (program: u32, location: i32, v0: u32, v1: u32, v2: u32) -> void
ProgramUniform3uiv:        (program: u32, location: i32, count: i32, value: *u32) -> void
ProgramUniform4i:          (program: u32, location: i32, v0: i32, v1: i32, v2: i32, v3: i32) -> void
ProgramUniform4iv:         (program: u32, location: i32, count: i32, value: *i32) -> void
ProgramUniform4f:          (program: u32, location: i32, v0: f32, v1: f32, v2: f32, v3: f32) -> void
ProgramUniform4fv:         (program: u32, location: i32, count: i32, value: *f32) -> void
ProgramUniform4d:          (program: u32, location: i32, v0: f64, v1: f64, v2: f64, v3: f64) -> void
ProgramUniform4dv:         (program: u32, location: i32, count: i32, value: *f64) -> void
ProgramUniform4ui:         (program: u32, location: i32, v0: u32, v1: u32, v2: u32, v3: u32) -> void
ProgramUniform4uiv:        (program: u32, location: i32, count: i32, value: *u32) -> void
ProgramUniformMatrix2fv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix3fv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix4fv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix2dv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix3dv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix4dv:   (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix2x3fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix3x2fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix2x4fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix4x2fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix3x4fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix4x3fv: (program: u32, location: i32, count: i32, transpose: u8, value: *f32) -> void
ProgramUniformMatrix2x3dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix3x2dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix2x4dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix4x2dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix3x4dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ProgramUniformMatrix4x3dv: (program: u32, location: i32, count: i32, transpose: u8, value: *f64) -> void
ValidateProgramPipeline:   (pipeline: u32) -> void
GetProgramPipelineInfoLog: (pipeline: u32, bufSize: i32, length: *i32, infoLog: *u8) -> void
VertexAttribL1d:           (index: u32, x: f64) -> void
VertexAttribL2d:           (index: u32, x: f64, y: f64) -> void
VertexAttribL3d:           (index: u32, x: f64, y: f64, z: f64) -> void
VertexAttribL4d:           (index: u32, x: f64, y: f64, z: f64, w: f64) -> void
VertexAttribL1dv:          (index: u32, v: *f64) -> void
VertexAttribL2dv:          (index: u32, v: *f64) -> void
VertexAttribL3dv:          (index: u32, v: *f64) -> void
VertexAttribL4dv:          (index: u32, v: *f64) -> void
VertexAttribLPointer:      (index: u32, size: i32, type_: u32, stride: i32, poi32er: rawptr) -> void
GetVertexAttribLdv:        (index: u32, pname: u32, params: *f64) -> void
ViewportArrayv:            (first: u32, count: i32, v: *f32) -> void
ViewportIndexedf:          (index: u32, x: f32, y: f32, w: f32, h: f32) -> void
ViewportIndexedfv:         (index: u32, v: *f32) -> void
ScissorArrayv:             (first: u32, count: i32, v: *i32) -> void
ScissorIndexed:            (index: u32, left: i32, bottom: i32, width: i32, height: i32) -> void
ScissorIndexedv:           (index: u32, v: *i32) -> void
DepthRangeArrayv:          (first: u32, count: i32, v: *f64) -> void
DepthRangeIndexed:         (index: u32, n: f64, f: f64) -> void
GetFloati_v:               (target: u32, index: u32, data: *f32) -> void
GetDoublei_v:              (target: u32, index: u32, data: *f64) -> void

load4_1 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    ReleaseShaderCompiler     = autocast getProcAddress("glReleaseShaderCompiler\x00".raw)
    ShaderBinary              = autocast getProcAddress("glShaderBinary\x00".raw)
    GetShaderPrecisionFormat  = autocast getProcAddress("glGetShaderPrecisionFormat\x00".raw)
    DepthRangef               = autocast getProcAddress("glDepthRangef\x00".raw)
    ClearDepthf               = autocast getProcAddress("glClearDepthf\x00".raw)
    GetProgramBinary          = autocast getProcAddress("glGetProgramBinary\x00".raw)
    ProgramBinary             = autocast getProcAddress("glProgramBinary\x00".raw)
    ProgramParameteri         = autocast getProcAddress("glProgramParameteri\x00".raw)
    UseProgramStages          = autocast getProcAddress("glUseProgramStages\x00".raw)
    ActiveShaderProgram       = autocast getProcAddress("glActiveShaderProgram\x00".raw)
    CreateShaderProgramv      = autocast getProcAddress("glCreateShaderProgramv\x00".raw)
    BindProgramPipeline       = autocast getProcAddress("glBindProgramPipeline\x00".raw)
    DeleteProgramPipelines    = autocast getProcAddress("glDeleteProgramPipelines\x00".raw)
    GenProgramPipelines       = autocast getProcAddress("glGenProgramPipelines\x00".raw)
    IsProgramPipeline         = autocast getProcAddress("glIsProgramPipeline\x00".raw)
    GetProgramPipelineiv      = autocast getProcAddress("glGetProgramPipelineiv\x00".raw)
    ProgramUniform1i          = autocast getProcAddress("glProgramUniform1i\x00".raw)
    ProgramUniform1iv         = autocast getProcAddress("glProgramUniform1iv\x00".raw)
    ProgramUniform1f          = autocast getProcAddress("glProgramUniform1f\x00".raw)
    ProgramUniform1fv         = autocast getProcAddress("glProgramUniform1fv\x00".raw)
    ProgramUniform1d          = autocast getProcAddress("glProgramUniform1d\x00".raw)
    ProgramUniform1dv         = autocast getProcAddress("glProgramUniform1dv\x00".raw)
    ProgramUniform1ui         = autocast getProcAddress("glProgramUniform1ui\x00".raw)
    ProgramUniform1uiv        = autocast getProcAddress("glProgramUniform1uiv\x00".raw)
    ProgramUniform2i          = autocast getProcAddress("glProgramUniform2i\x00".raw)
    ProgramUniform2iv         = autocast getProcAddress("glProgramUniform2iv\x00".raw)
    ProgramUniform2f          = autocast getProcAddress("glProgramUniform2f\x00".raw)
    ProgramUniform2fv         = autocast getProcAddress("glProgramUniform2fv\x00".raw)
    ProgramUniform2d          = autocast getProcAddress("glProgramUniform2d\x00".raw)
    ProgramUniform2dv         = autocast getProcAddress("glProgramUniform2dv\x00".raw)
    ProgramUniform2ui         = autocast getProcAddress("glProgramUniform2ui\x00".raw)
    ProgramUniform2uiv        = autocast getProcAddress("glProgramUniform2uiv\x00".raw)
    ProgramUniform3i          = autocast getProcAddress("glProgramUniform3i\x00".raw)
    ProgramUniform3iv         = autocast getProcAddress("glProgramUniform3iv\x00".raw)
    ProgramUniform3f          = autocast getProcAddress("glProgramUniform3f\x00".raw)
    ProgramUniform3fv         = autocast getProcAddress("glProgramUniform3fv\x00".raw)
    ProgramUniform3d          = autocast getProcAddress("glProgramUniform3d\x00".raw)
    ProgramUniform3dv         = autocast getProcAddress("glProgramUniform3dv\x00".raw)
    ProgramUniform3ui         = autocast getProcAddress("glProgramUniform3ui\x00".raw)
    ProgramUniform3uiv        = autocast getProcAddress("glProgramUniform3uiv\x00".raw)
    ProgramUniform4i          = autocast getProcAddress("glProgramUniform4i\x00".raw)
    ProgramUniform4iv         = autocast getProcAddress("glProgramUniform4iv\x00".raw)
    ProgramUniform4f          = autocast getProcAddress("glProgramUniform4f\x00".raw)
    ProgramUniform4fv         = autocast getProcAddress("glProgramUniform4fv\x00".raw)
    ProgramUniform4d          = autocast getProcAddress("glProgramUniform4d\x00".raw)
    ProgramUniform4dv         = autocast getProcAddress("glProgramUniform4dv\x00".raw)
    ProgramUniform4ui         = autocast getProcAddress("glProgramUniform4ui\x00".raw)
    ProgramUniform4uiv        = autocast getProcAddress("glProgramUniform4uiv\x00".raw)
    ProgramUniformMatrix2fv   = autocast getProcAddress("glProgramUniformMatrix2fv\x00".raw)
    ProgramUniformMatrix3fv   = autocast getProcAddress("glProgramUniformMatrix3fv\x00".raw)
    ProgramUniformMatrix4fv   = autocast getProcAddress("glProgramUniformMatrix4fv\x00".raw)
    ProgramUniformMatrix2dv   = autocast getProcAddress("glProgramUniformMatrix2dv\x00".raw)
    ProgramUniformMatrix3dv   = autocast getProcAddress("glProgramUniformMatrix3dv\x00".raw)
    ProgramUniformMatrix4dv   = autocast getProcAddress("glProgramUniformMatrix4dv\x00".raw)
    ProgramUniformMatrix2x3fv = autocast getProcAddress("glProgramUniformMatrix2x3fv\x00".raw)
    ProgramUniformMatrix3x2fv = autocast getProcAddress("glProgramUniformMatrix3x2fv\x00".raw)
    ProgramUniformMatrix2x4fv = autocast getProcAddress("glProgramUniformMatrix2x4fv\x00".raw)
    ProgramUniformMatrix4x2fv = autocast getProcAddress("glProgramUniformMatrix4x2fv\x00".raw)
    ProgramUniformMatrix3x4fv = autocast getProcAddress("glProgramUniformMatrix3x4fv\x00".raw)
    ProgramUniformMatrix4x3fv = autocast getProcAddress("glProgramUniformMatrix4x3fv\x00".raw)
    ProgramUniformMatrix2x3dv = autocast getProcAddress("glProgramUniformMatrix2x3dv\x00".raw)
    ProgramUniformMatrix3x2dv = autocast getProcAddress("glProgramUniformMatrix3x2dv\x00".raw)
    ProgramUniformMatrix2x4dv = autocast getProcAddress("glProgramUniformMatrix2x4dv\x00".raw)
    ProgramUniformMatrix4x2dv = autocast getProcAddress("glProgramUniformMatrix4x2dv\x00".raw)
    ProgramUniformMatrix3x4dv = autocast getProcAddress("glProgramUniformMatrix3x4dv\x00".raw)
    ProgramUniformMatrix4x3dv = autocast getProcAddress("glProgramUniformMatrix4x3dv\x00".raw)
    ValidateProgramPipeline   = autocast getProcAddress("glValidateProgramPipeline\x00".raw)
    GetProgramPipelineInfoLog = autocast getProcAddress("glGetProgramPipelineInfoLog\x00".raw)
    VertexAttribL1d           = autocast getProcAddress("glVertexAttribL1d\x00".raw)
    VertexAttribL2d           = autocast getProcAddress("glVertexAttribL2d\x00".raw)
    VertexAttribL3d           = autocast getProcAddress("glVertexAttribL3d\x00".raw)
    VertexAttribL4d           = autocast getProcAddress("glVertexAttribL4d\x00".raw)
    VertexAttribL1dv          = autocast getProcAddress("glVertexAttribL1dv\x00".raw)
    VertexAttribL2dv          = autocast getProcAddress("glVertexAttribL2dv\x00".raw)
    VertexAttribL3dv          = autocast getProcAddress("glVertexAttribL3dv\x00".raw)
    VertexAttribL4dv          = autocast getProcAddress("glVertexAttribL4dv\x00".raw)
    VertexAttribLPointer      = autocast getProcAddress("glVertexAttribLPointer\x00".raw)
    GetVertexAttribLdv        = autocast getProcAddress("glGetVertexAttribLdv\x00".raw)
    ViewportArrayv            = autocast getProcAddress("glViewportArrayv\x00".raw)
    ViewportIndexedf          = autocast getProcAddress("glViewportIndexedf\x00".raw)
    ViewportIndexedfv         = autocast getProcAddress("glViewportIndexedfv\x00".raw)
    ScissorArrayv             = autocast getProcAddress("glScissorArrayv\x00".raw)
    ScissorIndexed            = autocast getProcAddress("glScissorIndexed\x00".raw)
    ScissorIndexedv           = autocast getProcAddress("glScissorIndexedv\x00".raw)
    DepthRangeArrayv          = autocast getProcAddress("glDepthRangeArrayv\x00".raw)
    DepthRangeIndexed         = autocast getProcAddress("glDepthRangeIndexed\x00".raw)
    GetFloati_v               = autocast getProcAddress("glGetFloati_v\x00".raw)
    GetDoublei_v              = autocast getProcAddress("glGetDoublei_v\x00".raw)
}


// VERSION_4_2
DrawArraysInstancedBaseInstance:             (mode: u32, first: i32, count: i32, instancecount: i32, baseinstance: u32) -> void
DrawElementsInstancedBaseInstance:           (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, baseinstance: u32) -> void
DrawElementsInstancedBaseVertexBaseInstance: (mode: u32, count: i32, type_: u32, indices: rawptr, instancecount: i32, basevertex: i32, baseinstance: u32) -> void
Geti32ernalformativ:                         (target: u32, i32ernalformat: u32, pname: u32, bufSize: i32, params: *i32) -> void
GetActiveAtomicCounterBufferiv:              (program: u32, bufferIndex: u32, pname: u32, params: *i32) -> void
BindImageTexture:                            (unit: u32, texture: u32, level: i32, layered: u8, layer: i32, access: u32, format: u32) -> void
MemoryBarrier:                               (barriers: u32) -> void
TexStorage1D:                                (target: u32, levels: i32, i32ernalformat: u32, width: i32) -> void
TexStorage2D:                                (target: u32, levels: i32, i32ernalformat: u32, width: i32, height: i32) -> void
TexStorage3D:                                (target: u32, levels: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32) -> void
DrawTransformFeedbackInstanced:              (mode: u32, id: u32, instancecount: i32) -> void
DrawTransformFeedbackStreamInstanced:        (mode: u32, id: u32, stream: u32, instancecount: i32) -> void

load4_2 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    DrawArraysInstancedBaseInstance             = autocast getProcAddress("glDrawArraysInstancedBaseInstance\x00".raw)
    DrawElementsInstancedBaseInstance           = autocast getProcAddress("glDrawElementsInstancedBaseInstance\x00".raw)
    DrawElementsInstancedBaseVertexBaseInstance = autocast getProcAddress("glDrawElementsInstancedBaseVertexBaseInstance\x00".raw)
    Geti32ernalformativ                         = autocast getProcAddress("glGeti32ernalformativ\x00".raw)
    GetActiveAtomicCounterBufferiv              = autocast getProcAddress("glGetActiveAtomicCounterBufferiv\x00".raw)
    BindImageTexture                            = autocast getProcAddress("glBindImageTexture\x00".raw)
    MemoryBarrier                               = autocast getProcAddress("glMemoryBarrier\x00".raw)
    TexStorage1D                                = autocast getProcAddress("glTexStorage1D\x00".raw)
    TexStorage2D                                = autocast getProcAddress("glTexStorage2D\x00".raw)
    TexStorage3D                                = autocast getProcAddress("glTexStorage3D\x00".raw)
    DrawTransformFeedbackInstanced              = autocast getProcAddress("glDrawTransformFeedbackInstanced\x00".raw)
    DrawTransformFeedbackStreamInstanced        = autocast getProcAddress("glDrawTransformFeedbackStreamInstanced\x00".raw)
}

// VERSION_4_3
ClearBufferData:                 (target: u32, i32ernalformat: u32, format: u32, type_: u32, data: rawptr) -> void
ClearBufferSubData:              (target: u32, i32ernalformat: u32, offset: i32, size: i32, format: u32, type_: u32, data: rawptr) -> void
DispatchCompute:                 (num_groups_x: u32, num_groups_y: u32, num_groups_z: u32) -> void
DispatchComputeIndirect:         (indirect: i32) -> void
CopyImageSubData:                (srcName: u32, srcTarget: u32, srcLevel: i32, srcX: i32, srcY: i32, srcZ: i32, dstName: u32, dstTarget: u32, dstLevel: i32, dstX: i32, dstY: i32, dstZ: i32, srcWidth: i32, srcHeight: i32, srcDepth: i32) -> void
FramebufferParameteri:           (target: u32, pname: u32, param: i32) -> void
GetFramebufferParameteriv:       (target: u32, pname: u32, params: *i32) -> void
Geti32ernalformati64v:           (target: u32, i32ernalformat: u32, pname: u32, bufSize: i32, params: *i64) -> void
InvalidateTexSubImage:           (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32) -> void
InvalidateTexImage:              (texture: u32, level: i32) -> void
InvalidateBufferSubData:         (buffer: u32, offset: i32, length: i32) -> void
InvalidateBufferData:            (buffer: u32) -> void
InvalidateFramebuffer:           (target: u32, numAttachments: i32, attachments: *u32) -> void
InvalidateSubFramebuffer:        (target: u32, numAttachments: i32, attachments: *u32, x: i32, y: i32, width: i32, height: i32) -> void
MultiDrawArraysIndirect:         (mode: u32, indirect: rawptr, drawcount: i32, stride: i32) -> void
MultiDrawElementsIndirect:       (mode: u32, type_: u32, indirect: rawptr, drawcount: i32, stride: i32) -> void
GetProgrami32erfaceiv:           (program: u32, programi32erface: u32, pname: u32, params: *i32) -> void
GetProgramResourceIndex:         (program: u32, programi32erface: u32, name: *u8) -> u32
GetProgramResourceName:          (program: u32, programi32erface: u32, index: u32, bufSize: i32, length: *i32, name: *u8) -> void
GetProgramResourceiv:            (program: u32, programi32erface: u32, index: u32, propCount: i32, props: *u32, bufSize: i32, length: *i32, params: *i32) -> void
GetProgramResourceLocation:      (program: u32, programi32erface: u32, name: *u8) -> i32
GetProgramResourceLocationIndex: (program: u32, programi32erface: u32, name: *u8) -> i32
ShaderStorageBlockBinding:       (program: u32, storageBlockIndex: u32, storageBlockBinding: u32) -> void
TexBufferRange:                  (target: u32, i32ernalformat: u32, buffer: u32, offset: i32, size: i32) -> void
TexStorage2DMultisample:         (target: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, fixedsamplelocations: u8) -> void
TexStorage3DMultisample:         (target: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) -> void
TextureView:                     (texture: u32, target: u32, origtexture: u32, i32ernalformat: u32, minlevel: u32, numlevels: u32, minlayer: u32, numlayers: u32) -> void
BindVertexBuffer:                (bindingindex: u32, buffer: u32, offset: i32, stride: i32) -> void
VertexAttribFormat:              (attribindex: u32, size: i32, type_: u32, normalized: u8, relativeoffset: u32) -> void
VertexAttribIFormat:             (attribindex: u32, size: i32, type_: u32, relativeoffset: u32) -> void
VertexAttribLFormat:             (attribindex: u32, size: i32, type_: u32, relativeoffset: u32) -> void
VertexAttribBinding:             (attribindex: u32, bindingindex: u32) -> void
VertexBindingDivisor:            (bindingindex: u32, divisor: u32) -> void
DebugMessageControl:             (source: u32, type_: u32, severity: u32, count: i32, ids: *u32, enabled: u8) -> void
DebugMessageInsert:              (source: u32, type_: u32, id: u32, severity: u32, length: i32, buf: *u8) -> void
DebugMessageCallback:            (callback: debug_proc_t, userParam: rawptr) -> void
GetDebugMessageLog:              (count: u32, bufSize: i32, sources: *u32, types: *u32, ids: *u32, severities: *u32, lengths: *i32, messageLog: *u8) -> u32
PushDebugGroup:                  (source: u32, id: u32, length: i32, message: *u8) -> void
PopDebugGroup:                   () -> void
ObjectLabel:                     (identifier: u32, name: u32, length: i32, label: *u8) -> void
GetObjectLabel:                  (identifier: u32, name: u32, bufSize: i32, length: *i32, label: *u8) -> void
ObjectPtrLabel:                  (ptr: rawptr, length: i32, label: *u8) -> void
GetObjectPtrLabel:               (ptr: rawptr, bufSize: i32, length: *i32, label: *u8) -> void

load4_3 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    ClearBufferData                 = autocast getProcAddress("glClearBufferData\x00".raw)
    ClearBufferSubData              = autocast getProcAddress("glClearBufferSubData\x00".raw)
    DispatchCompute                 = autocast getProcAddress("glDispatchCompute\x00".raw)
    DispatchComputeIndirect         = autocast getProcAddress("glDispatchComputeIndirect\x00".raw)
    CopyImageSubData                = autocast getProcAddress("glCopyImageSubData\x00".raw)
    FramebufferParameteri           = autocast getProcAddress("glFramebufferParameteri\x00".raw)
    GetFramebufferParameteriv       = autocast getProcAddress("glGetFramebufferParameteriv\x00".raw)
    Geti32ernalformati64v           = autocast getProcAddress("glGeti32ernalformati64v\x00".raw)
    InvalidateTexSubImage           = autocast getProcAddress("glInvalidateTexSubImage\x00".raw)
    InvalidateTexImage              = autocast getProcAddress("glInvalidateTexImage\x00".raw)
    InvalidateBufferSubData         = autocast getProcAddress("glInvalidateBufferSubData\x00".raw)
    InvalidateBufferData            = autocast getProcAddress("glInvalidateBufferData\x00".raw)
    InvalidateFramebuffer           = autocast getProcAddress("glInvalidateFramebuffer\x00".raw)
    InvalidateSubFramebuffer        = autocast getProcAddress("glInvalidateSubFramebuffer\x00".raw)
    MultiDrawArraysIndirect         = autocast getProcAddress("glMultiDrawArraysIndirect\x00".raw)
    MultiDrawElementsIndirect       = autocast getProcAddress("glMultiDrawElementsIndirect\x00".raw)
    GetProgrami32erfaceiv           = autocast getProcAddress("glGetProgrami32erfaceiv\x00".raw)
    GetProgramResourceIndex         = autocast getProcAddress("glGetProgramResourceIndex\x00".raw)
    GetProgramResourceName          = autocast getProcAddress("glGetProgramResourceName\x00".raw)
    GetProgramResourceiv            = autocast getProcAddress("glGetProgramResourceiv\x00".raw)
    GetProgramResourceLocation      = autocast getProcAddress("glGetProgramResourceLocation\x00".raw)
    GetProgramResourceLocationIndex = autocast getProcAddress("glGetProgramResourceLocationIndex\x00".raw)
    ShaderStorageBlockBinding       = autocast getProcAddress("glShaderStorageBlockBinding\x00".raw)
    TexBufferRange                  = autocast getProcAddress("glTexBufferRange\x00".raw)
    TexStorage2DMultisample         = autocast getProcAddress("glTexStorage2DMultisample\x00".raw)
    TexStorage3DMultisample         = autocast getProcAddress("glTexStorage3DMultisample\x00".raw)
    TextureView                     = autocast getProcAddress("glTextureView\x00".raw)
    BindVertexBuffer                = autocast getProcAddress("glBindVertexBuffer\x00".raw)
    VertexAttribFormat              = autocast getProcAddress("glVertexAttribFormat\x00".raw)
    VertexAttribIFormat             = autocast getProcAddress("glVertexAttribIFormat\x00".raw)
    VertexAttribLFormat             = autocast getProcAddress("glVertexAttribLFormat\x00".raw)
    VertexAttribBinding             = autocast getProcAddress("glVertexAttribBinding\x00".raw)
    VertexBindingDivisor            = autocast getProcAddress("glVertexBindingDivisor\x00".raw)
    DebugMessageControl             = autocast getProcAddress("glDebugMessageControl\x00".raw)
    DebugMessageInsert              = autocast getProcAddress("glDebugMessageInsert\x00".raw)
    DebugMessageCallback            = autocast getProcAddress("glDebugMessageCallback\x00".raw)
    GetDebugMessageLog              = autocast getProcAddress("glGetDebugMessageLog\x00".raw)
    PushDebugGroup                  = autocast getProcAddress("glPushDebugGroup\x00".raw)
    PopDebugGroup                   = autocast getProcAddress("glPopDebugGroup\x00".raw)
    ObjectLabel                     = autocast getProcAddress("glObjectLabel\x00".raw)
    GetObjectLabel                  = autocast getProcAddress("glGetObjectLabel\x00".raw)
    ObjectPtrLabel                  = autocast getProcAddress("glObjectPtrLabel\x00".raw)
    GetObjectPtrLabel               = autocast getProcAddress("glGetObjectPtrLabel\x00".raw)
}

// VERSION_4_4
BufferStorage:     (target: u32, size: i32, data: rawptr, flags: u32) -> void
ClearTexImage:     (texture: u32, level: i32, format: u32, type_: u32, data: rawptr) -> void
ClearTexSubImage:  (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, type_: u32, data: rawptr) -> void
BindBuffersBase:   (target: u32, first: u32, count: i32, buffers: *u32) -> void
BindBuffersRange:  (target: u32, first: u32, count: i32, buffers: *u32, offsets: *i32, sizes: *i32) -> void
BindTextures:      (first: u32, count: i32, textures: *u32) -> void
BindSamplers:      (first: u32, count: i32, samplers: *u32) -> void
BindImageTextures: (first: u32, count: i32, textures: *u32) -> void
BindVertexBuffers: (first: u32, count: i32, buffers: *u32, offsets: *i32, strides: *i32) -> void

load4_4 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    BufferStorage     = autocast getProcAddress("glBufferStorage\x00".raw)
    ClearTexImage     = autocast getProcAddress("glClearTexImage\x00".raw)
    ClearTexSubImage  = autocast getProcAddress("glClearTexSubImage\x00".raw)
    BindBuffersBase   = autocast getProcAddress("glBindBuffersBase\x00".raw)
    BindBuffersRange  = autocast getProcAddress("glBindBuffersRange\x00".raw)
    BindTextures      = autocast getProcAddress("glBindTextures\x00".raw)
    BindSamplers      = autocast getProcAddress("glBindSamplers\x00".raw)
    BindImageTextures = autocast getProcAddress("glBindImageTextures\x00".raw)
    BindVertexBuffers = autocast getProcAddress("glBindVertexBuffers\x00".raw)
}

// VERSION_4_5
ClipControl:                              (origin: u32, depth: u32) -> void
CreateTransformFeedbacks:                 (n: i32, ids: *u32) -> void
TransformFeedbackBufferBase:              (xfb: u32, index: u32, buffer: u32) -> void
TransformFeedbackBufferRange:             (xfb: u32, index: u32, buffer: u32, offset: i32, size: i32) -> void
GetTransformFeedbackiv:                   (xfb: u32, pname: u32, param: *i32) -> void
GetTransformFeedbacki_v:                  (xfb: u32, pname: u32, index: u32, param: *i32) -> void
GetTransformFeedbacki64_v:                (xfb: u32, pname: u32, index: u32, param: *i64) -> void
CreateBuffers:                            (n: i32, buffers: *u32) -> void
NamedBufferStorage:                       (buffer: u32, size: i32, data: rawptr, flags: u32) -> void
NamedBufferData:                          (buffer: u32, size: i32, data: rawptr, usage: u32) -> void
NamedBufferSubData:                       (buffer: u32, offset: i32, size: i32, data: rawptr) -> void
CopyNamedBufferSubData:                   (readBuffer: u32, writeBuffer: u32, readOffset: i32, writeOffset: i32, size: i32) -> void
ClearNamedBufferData:                     (buffer: u32, i32ernalformat: u32, format: u32, type_: u32, data: rawptr) -> void
ClearNamedBufferSubData:                  (buffer: u32, i32ernalformat: u32, offset: i32, size: i32, format: u32, type_: u32, data: rawptr) -> void
MapNamedBuffer:                           (buffer: u32, access: u32) -> rawptr
MapNamedBufferRange:                      (buffer: u32, offset: i32, length: i32, access: u32) -> rawptr
UnmapNamedBuffer:                         (buffer: u32) -> u8
FlushMappedNamedBufferRange:              (buffer: u32, offset: i32, length: i32) -> void
GetNamedBufferParameteriv:                (buffer: u32, pname: u32, params: *i32) -> void
GetNamedBufferParameteri64v:              (buffer: u32, pname: u32, params: *i64) -> void
GetNamedBufferPointerv:                   (buffer: u32, pname: u32, params: *rawptr) -> void
GetNamedBufferSubData:                    (buffer: u32, offset: i32, size: i32, data: rawptr) -> void
CreateFramebuffers:                       (n: i32, framebuffers: *u32) -> void
NamedFramebufferRenderbuffer:             (framebuffer: u32, attachment: u32, renderbuffertarget: u32, renderbuffer: u32) -> void
NamedFramebufferParameteri:               (framebuffer: u32, pname: u32, param: i32) -> void
NamedFramebufferTexture:                  (framebuffer: u32, attachment: u32, texture: u32, level: i32) -> void
NamedFramebufferTextureLayer:             (framebuffer: u32, attachment: u32, texture: u32, level: i32, layer: i32) -> void
NamedFramebufferDrawBuffer:               (framebuffer: u32, buf: u32) -> void
NamedFramebufferDrawBuffers:              (framebuffer: u32, n: i32, bufs: *u32) -> void
NamedFramebufferReadBuffer:               (framebuffer: u32, src: u32) -> void
InvalidateNamedFramebufferData:           (framebuffer: u32, numAttachments: i32, attachments: *u32) -> void
InvalidateNamedFramebufferSubData:        (framebuffer: u32, numAttachments: i32, attachments: *u32, x: i32, y: i32, width: i32, height: i32) -> void
ClearNamedFramebufferiv:                  (framebuffer: u32, buffer: u32, drawbuffer: i32, value: *i32) -> void
ClearNamedFramebufferuiv:                 (framebuffer: u32, buffer: u32, drawbuffer: i32, value: *u32) -> void
ClearNamedFramebufferfv:                  (framebuffer: u32, buffer: u32, drawbuffer: i32, value: *f32) -> void
ClearNamedFramebufferfi:                  (framebuffer: u32, buffer: u32, drawbuffer: i32, depth: f32, stencil: i32) -> void
BlitNamedFramebuffer:                     (readFramebuffer: u32, drawFramebuffer: u32, srcX0: i32, srcY0: i32, srcX1: i32, srcY1: i32, dstX0: i32, dstY0: i32, dstX1: i32, dstY1: i32, mask: u32, filter: u32) -> void
CheckNamedFramebufferStatus:              (framebuffer: u32, target: u32) -> u32
GetNamedFramebufferParameteriv:           (framebuffer: u32, pname: u32, param: *i32) -> void
GetNamedFramebufferAttachmentParameteriv: (framebuffer: u32, attachment: u32, pname: u32, params: *i32) -> void
CreateRenderbuffers:                      (n: i32, renderbuffers: *u32) -> void
NamedRenderbufferStorage:                 (renderbuffer: u32, i32ernalformat: u32, width: i32, height: i32) -> void
NamedRenderbufferStorageMultisample:      (renderbuffer: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32) -> void
GetNamedRenderbufferParameteriv:          (renderbuffer: u32, pname: u32, params: *i32) -> void
CreateTextures:                           (target: u32, n: i32, textures: *u32) -> void
TextureBuffer:                            (texture: u32, i32ernalformat: u32, buffer: u32) -> void
TextureBufferRange:                       (texture: u32, i32ernalformat: u32, buffer: u32, offset: i32, size: i32) -> void
TextureStorage1D:                         (texture: u32, levels: i32, i32ernalformat: u32, width: i32) -> void
TextureStorage2D:                         (texture: u32, levels: i32, i32ernalformat: u32, width: i32, height: i32) -> void
TextureStorage3D:                         (texture: u32, levels: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32) -> void
TextureStorage2DMultisample:              (texture: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, fixedsamplelocations: u8) -> void
TextureStorage3DMultisample:              (texture: u32, samples: i32, i32ernalformat: u32, width: i32, height: i32, depth: i32, fixedsamplelocations: u8) -> void
TextureSubImage1D:                        (texture: u32, level: i32, xoffset: i32, width: i32, format: u32, type_: u32, pixels: rawptr) -> void
TextureSubImage2D:                        (texture: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, type_: u32, pixels: rawptr) -> void
TextureSubImage3D:                        (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, type_: u32, pixels: rawptr) -> void
CompressedTextureSubImage1D:              (texture: u32, level: i32, xoffset: i32, width: i32, format: u32, imageSize: i32, data: rawptr) -> void
CompressedTextureSubImage2D:              (texture: u32, level: i32, xoffset: i32, yoffset: i32, width: i32, height: i32, format: u32, imageSize: i32, data: rawptr) -> void
CompressedTextureSubImage3D:              (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, imageSize: i32, data: rawptr) -> void
CopyTextureSubImage1D:                    (texture: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32) -> void
CopyTextureSubImage2D:                    (texture: u32, level: i32, xoffset: i32, yoffset: i32, x: i32, y: i32, width: i32, height: i32) -> void
CopyTextureSubImage3D:                    (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, x: i32, y: i32, width: i32, height: i32) -> void
TextureParameterf:                        (texture: u32, pname: u32, param: f32) -> void
TextureParameterfv:                       (texture: u32, pname: u32, param: *f32) -> void
TextureParameteri:                        (texture: u32, pname: u32, param: i32) -> void
TextureParameterIiv:                      (texture: u32, pname: u32, params: *i32) -> void
TextureParameterIuiv:                     (texture: u32, pname: u32, params: *u32) -> void
TextureParameteriv:                       (texture: u32, pname: u32, param: *i32) -> void
GenerateTextureMipmap:                    (texture: u32) -> void
BindTextureUnit:                          (unit: u32, texture: u32) -> void
GetTextureImage:                          (texture: u32, level: i32, format: u32, type_: u32, bufSize: i32, pixels: rawptr) -> void
GetCompressedTextureImage:                (texture: u32, level: i32, bufSize: i32, pixels: rawptr) -> void
GetTextureLevelParameterfv:               (texture: u32, level: i32, pname: u32, params: *f32) -> void
GetTextureLevelParameteriv:               (texture: u32, level: i32, pname: u32, params: *i32) -> void
GetTextureParameterfv:                    (texture: u32, pname: u32, params: *f32) -> void
GetTextureParameterIiv:                   (texture: u32, pname: u32, params: *i32) -> void
GetTextureParameterIuiv:                  (texture: u32, pname: u32, params: *u32) -> void
GetTextureParameteriv:                    (texture: u32, pname: u32, params: *i32) -> void
CreateVertexArrays:                       (n: i32, arrays: *u32) -> void
DisableVertexArrayAttrib:                 (vaobj: u32, index: u32) -> void
EnableVertexArrayAttrib:                  (vaobj: u32, index: u32) -> void
VertexArrayElementBuffer:                 (vaobj: u32, buffer: u32) -> void
VertexArrayVertexBuffer:                  (vaobj: u32, bindingindex: u32, buffer: u32, offset: i32, stride: i32) -> void
VertexArrayVertexBuffers:                 (vaobj: u32, first: u32, count: i32, buffers: *u32, offsets: *i32, strides: *i32) -> void
VertexArrayAttribBinding:                 (vaobj: u32, attribindex: u32, bindingindex: u32) -> void
VertexArrayAttribFormat:                  (vaobj: u32, attribindex: u32, size: i32, type_: u32, normalized: u8, relativeoffset: u32) -> void
VertexArrayAttribIFormat:                 (vaobj: u32, attribindex: u32, size: i32, type_: u32, relativeoffset: u32) -> void
VertexArrayAttribLFormat:                 (vaobj: u32, attribindex: u32, size: i32, type_: u32, relativeoffset: u32) -> void
VertexArrayBindingDivisor:                (vaobj: u32, bindingindex: u32, divisor: u32) -> void
GetVertexArrayiv:                         (vaobj: u32, pname: u32, param: *i32) -> void
GetVertexArrayIndexediv:                  (vaobj: u32, index: u32, pname: u32, param: *i32) -> void
GetVertexArrayIndexed64iv:                (vaobj: u32, index: u32, pname: u32, param: *i64) -> void
CreateSamplers:                           (n: i32, samplers: *u32) -> void
CreateProgramPipelines:                   (n: i32, pipelines: *u32) -> void
CreateQueries:                            (target: u32, n: i32, ids: *u32) -> void
GetQueryBufferObjecti64v:                 (id: u32, buffer: u32, pname: u32, offset: i32) -> void
GetQueryBufferObjectiv:                   (id: u32, buffer: u32, pname: u32, offset: i32) -> void
GetQueryBufferObjectui64v:                (id: u32, buffer: u32, pname: u32, offset: i32) -> void
GetQueryBufferObjectuiv:                  (id: u32, buffer: u32, pname: u32, offset: i32) -> void
MemoryBarrierByRegion:                    (barriers: u32) -> void
GetTextureSubImage:                       (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, format: u32, type_: u32, bufSize: i32, pixels: rawptr) -> void
GetCompressedTextureSubImage:             (texture: u32, level: i32, xoffset: i32, yoffset: i32, zoffset: i32, width: i32, height: i32, depth: i32, bufSize: i32, pixels: rawptr) -> void
GetGraphicsResetStatus:                   () -> u32
GetnCompressedTexImage:                   (target: u32, lod: i32, bufSize: i32, pixels: rawptr) -> void
GetnTexImage:                             (target: u32, level: i32, format: u32, type_: u32, bufSize: i32, pixels: rawptr) -> void
GetnUniformdv:                            (program: u32, location: i32, bufSize: i32, params: *f64) -> void
GetnUniformfv:                            (program: u32, location: i32, bufSize: i32, params: *f32) -> void
GetnUniformiv:                            (program: u32, location: i32, bufSize: i32, params: *i32) -> void
GetnUniformuiv:                           (program: u32, location: i32, bufSize: i32, params: *u32) -> void
ReadnPixels:                              (x: i32, y: i32, width: i32, height: i32, format: u32, type_: u32, bufSize: i32, data: rawptr) -> void
GetnMapdv:                                (target: u32, query: u32, bufSize: i32, v: *f64) -> void
GetnMapfv:                                (target: u32, query: u32, bufSize: i32, v: *f32) -> void
GetnMapiv:                                (target: u32, query: u32, bufSize: i32, v: *i32) -> void
GetnPixelMapusv:                          (map_: u32, bufSize: i32, values: *u16) -> void
GetnPixelMapfv:                           (map_: u32, bufSize: i32, values: *f32) -> void
GetnPixelMapuiv:                          (map_: u32, bufSize: i32, values: *u32) -> void
GetnPolygonStipple:                       (bufSize: i32, pattern: *u8) -> void
GetnColorTable:                           (target: u32, format: u32, type_: u32, bufSize: i32, table: rawptr) -> void
GetnConvolutionFilter:                    (target: u32, format: u32, type_: u32, bufSize: i32, image: rawptr) -> void
GetnSeparableFilter:                      (target: u32, format: u32, type_: u32, rowBufSize: i32, row: rawptr, columnBufSize: i32, column: rawptr, span: rawptr) -> void
GetnHistogram:                            (target: u32, reset: u8, format: u32, type_: u32, bufSize: i32, values: rawptr) -> void
GetnMinmax:                               (target: u32, reset: u8, format: u32, type_: u32, bufSize: i32, values: rawptr) -> void
TextureBarrier:                           () -> void

load4_5 :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {
    ClipControl                              = autocast getProcAddress("glClipControl\x00".raw)
    CreateTransformFeedbacks                 = autocast getProcAddress("glCreateTransformFeedbacks\x00".raw)
    TransformFeedbackBufferBase              = autocast getProcAddress("glTransformFeedbackBufferBase\x00".raw)
    TransformFeedbackBufferRange             = autocast getProcAddress("glTransformFeedbackBufferRange\x00".raw)
    GetTransformFeedbackiv                   = autocast getProcAddress("glGetTransformFeedbackiv\x00".raw)
    GetTransformFeedbacki_v                  = autocast getProcAddress("glGetTransformFeedbacki_v\x00".raw)
    GetTransformFeedbacki64_v                = autocast getProcAddress("glGetTransformFeedbacki64_v\x00".raw)
    CreateBuffers                            = autocast getProcAddress("glCreateBuffers\x00".raw)
    NamedBufferStorage                       = autocast getProcAddress("glNamedBufferStorage\x00".raw)
    NamedBufferData                          = autocast getProcAddress("glNamedBufferData\x00".raw)
    NamedBufferSubData                       = autocast getProcAddress("glNamedBufferSubData\x00".raw)
    CopyNamedBufferSubData                   = autocast getProcAddress("glCopyNamedBufferSubData\x00".raw)
    ClearNamedBufferData                     = autocast getProcAddress("glClearNamedBufferData\x00".raw)
    ClearNamedBufferSubData                  = autocast getProcAddress("glClearNamedBufferSubData\x00".raw)
    MapNamedBuffer                           = autocast getProcAddress("glMapNamedBuffer\x00".raw)
    MapNamedBufferRange                      = autocast getProcAddress("glMapNamedBufferRange\x00".raw)
    UnmapNamedBuffer                         = autocast getProcAddress("glUnmapNamedBuffer\x00".raw)
    FlushMappedNamedBufferRange              = autocast getProcAddress("glFlushMappedNamedBufferRange\x00".raw)
    GetNamedBufferParameteriv                = autocast getProcAddress("glGetNamedBufferParameteriv\x00".raw)
    GetNamedBufferParameteri64v              = autocast getProcAddress("glGetNamedBufferParameteri64v\x00".raw)
    GetNamedBufferPointerv                   = autocast getProcAddress("glGetNamedBufferPointerv\x00".raw)
    GetNamedBufferSubData                    = autocast getProcAddress("glGetNamedBufferSubData\x00".raw)
    CreateFramebuffers                       = autocast getProcAddress("glCreateFramebuffers\x00".raw)
    NamedFramebufferRenderbuffer             = autocast getProcAddress("glNamedFramebufferRenderbuffer\x00".raw)
    NamedFramebufferParameteri               = autocast getProcAddress("glNamedFramebufferParameteri\x00".raw)
    NamedFramebufferTexture                  = autocast getProcAddress("glNamedFramebufferTexture\x00".raw)
    NamedFramebufferTextureLayer             = autocast getProcAddress("glNamedFramebufferTextureLayer\x00".raw)
    NamedFramebufferDrawBuffer               = autocast getProcAddress("glNamedFramebufferDrawBuffer\x00".raw)
    NamedFramebufferDrawBuffers              = autocast getProcAddress("glNamedFramebufferDrawBuffers\x00".raw)
    NamedFramebufferReadBuffer               = autocast getProcAddress("glNamedFramebufferReadBuffer\x00".raw)
    InvalidateNamedFramebufferData           = autocast getProcAddress("glInvalidateNamedFramebufferData\x00".raw)
    InvalidateNamedFramebufferSubData        = autocast getProcAddress("glInvalidateNamedFramebufferSubData\x00".raw)
    ClearNamedFramebufferiv                  = autocast getProcAddress("glClearNamedFramebufferiv\x00".raw)
    ClearNamedFramebufferuiv                 = autocast getProcAddress("glClearNamedFramebufferuiv\x00".raw)
    ClearNamedFramebufferfv                  = autocast getProcAddress("glClearNamedFramebufferfv\x00".raw)
    ClearNamedFramebufferfi                  = autocast getProcAddress("glClearNamedFramebufferfi\x00".raw)
    BlitNamedFramebuffer                     = autocast getProcAddress("glBlitNamedFramebuffer\x00".raw)
    CheckNamedFramebufferStatus              = autocast getProcAddress("glCheckNamedFramebufferStatus\x00".raw)
    GetNamedFramebufferParameteriv           = autocast getProcAddress("glGetNamedFramebufferParameteriv\x00".raw)
    GetNamedFramebufferAttachmentParameteriv = autocast getProcAddress("glGetNamedFramebufferAttachmentParameteriv\x00".raw)
    CreateRenderbuffers                      = autocast getProcAddress("glCreateRenderbuffers\x00".raw)
    NamedRenderbufferStorage                 = autocast getProcAddress("glNamedRenderbufferStorage\x00".raw)
    NamedRenderbufferStorageMultisample      = autocast getProcAddress("glNamedRenderbufferStorageMultisample\x00".raw)
    GetNamedRenderbufferParameteriv          = autocast getProcAddress("glGetNamedRenderbufferParameteriv\x00".raw)
    CreateTextures                           = autocast getProcAddress("glCreateTextures\x00".raw)
    TextureBuffer                            = autocast getProcAddress("glTextureBuffer\x00".raw)
    TextureBufferRange                       = autocast getProcAddress("glTextureBufferRange\x00".raw)
    TextureStorage1D                         = autocast getProcAddress("glTextureStorage1D\x00".raw)
    TextureStorage2D                         = autocast getProcAddress("glTextureStorage2D\x00".raw)
    TextureStorage3D                         = autocast getProcAddress("glTextureStorage3D\x00".raw)
    TextureStorage2DMultisample              = autocast getProcAddress("glTextureStorage2DMultisample\x00".raw)
    TextureStorage3DMultisample              = autocast getProcAddress("glTextureStorage3DMultisample\x00".raw)
    TextureSubImage1D                        = autocast getProcAddress("glTextureSubImage1D\x00".raw)
    TextureSubImage2D                        = autocast getProcAddress("glTextureSubImage2D\x00".raw)
    TextureSubImage3D                        = autocast getProcAddress("glTextureSubImage3D\x00".raw)
    CompressedTextureSubImage1D              = autocast getProcAddress("glCompressedTextureSubImage1D\x00".raw)
    CompressedTextureSubImage2D              = autocast getProcAddress("glCompressedTextureSubImage2D\x00".raw)
    CompressedTextureSubImage3D              = autocast getProcAddress("glCompressedTextureSubImage3D\x00".raw)
    CopyTextureSubImage1D                    = autocast getProcAddress("glCopyTextureSubImage1D\x00".raw)
    CopyTextureSubImage2D                    = autocast getProcAddress("glCopyTextureSubImage2D\x00".raw)
    CopyTextureSubImage3D                    = autocast getProcAddress("glCopyTextureSubImage3D\x00".raw)
    TextureParameterf                        = autocast getProcAddress("glTextureParameterf\x00".raw)
    TextureParameterfv                       = autocast getProcAddress("glTextureParameterfv\x00".raw)
    TextureParameteri                        = autocast getProcAddress("glTextureParameteri\x00".raw)
    TextureParameterIiv                      = autocast getProcAddress("glTextureParameterIiv\x00".raw)
    TextureParameterIuiv                     = autocast getProcAddress("glTextureParameterIuiv\x00".raw)
    TextureParameteriv                       = autocast getProcAddress("glTextureParameteriv\x00".raw)
    GenerateTextureMipmap                    = autocast getProcAddress("glGenerateTextureMipmap\x00".raw)
    BindTextureUnit                          = autocast getProcAddress("glBindTextureUnit\x00".raw)
    GetTextureImage                          = autocast getProcAddress("glGetTextureImage\x00".raw)
    GetCompressedTextureImage                = autocast getProcAddress("glGetCompressedTextureImage\x00".raw)
    GetTextureLevelParameterfv               = autocast getProcAddress("glGetTextureLevelParameterfv\x00".raw)
    GetTextureLevelParameteriv               = autocast getProcAddress("glGetTextureLevelParameteriv\x00".raw)
    GetTextureParameterfv                    = autocast getProcAddress("glGetTextureParameterfv\x00".raw)
    GetTextureParameterIiv                   = autocast getProcAddress("glGetTextureParameterIiv\x00".raw)
    GetTextureParameterIuiv                  = autocast getProcAddress("glGetTextureParameterIuiv\x00".raw)
    GetTextureParameteriv                    = autocast getProcAddress("glGetTextureParameteriv\x00".raw)
    CreateVertexArrays                       = autocast getProcAddress("glCreateVertexArrays\x00".raw)
    DisableVertexArrayAttrib                 = autocast getProcAddress("glDisableVertexArrayAttrib\x00".raw)
    EnableVertexArrayAttrib                  = autocast getProcAddress("glEnableVertexArrayAttrib\x00".raw)
    VertexArrayElementBuffer                 = autocast getProcAddress("glVertexArrayElementBuffer\x00".raw)
    VertexArrayVertexBuffer                  = autocast getProcAddress("glVertexArrayVertexBuffer\x00".raw)
    VertexArrayVertexBuffers                 = autocast getProcAddress("glVertexArrayVertexBuffers\x00".raw)
    VertexArrayAttribBinding                 = autocast getProcAddress("glVertexArrayAttribBinding\x00".raw)
    VertexArrayAttribFormat                  = autocast getProcAddress("glVertexArrayAttribFormat\x00".raw)
    VertexArrayAttribIFormat                 = autocast getProcAddress("glVertexArrayAttribIFormat\x00".raw)
    VertexArrayAttribLFormat                 = autocast getProcAddress("glVertexArrayAttribLFormat\x00".raw)
    VertexArrayBindingDivisor                = autocast getProcAddress("glVertexArrayBindingDivisor\x00".raw)
    GetVertexArrayiv                         = autocast getProcAddress("glGetVertexArrayiv\x00".raw)
    GetVertexArrayIndexediv                  = autocast getProcAddress("glGetVertexArrayIndexediv\x00".raw)
    GetVertexArrayIndexed64iv                = autocast getProcAddress("glGetVertexArrayIndexed64iv\x00".raw)
    CreateSamplers                           = autocast getProcAddress("glCreateSamplers\x00".raw)
    CreateProgramPipelines                   = autocast getProcAddress("glCreateProgramPipelines\x00".raw)
    CreateQueries                            = autocast getProcAddress("glCreateQueries\x00".raw)
    GetQueryBufferObjecti64v                 = autocast getProcAddress("glGetQueryBufferObjecti64v\x00".raw)
    GetQueryBufferObjectiv                   = autocast getProcAddress("glGetQueryBufferObjectiv\x00".raw)
    GetQueryBufferObjectui64v                = autocast getProcAddress("glGetQueryBufferObjectui64v\x00".raw)
    GetQueryBufferObjectuiv                  = autocast getProcAddress("glGetQueryBufferObjectuiv\x00".raw)
    MemoryBarrierByRegion                    = autocast getProcAddress("glMemoryBarrierByRegion\x00".raw)
    GetTextureSubImage                       = autocast getProcAddress("glGetTextureSubImage\x00".raw)
    GetCompressedTextureSubImage             = autocast getProcAddress("glGetCompressedTextureSubImage\x00".raw)
    GetGraphicsResetStatus                   = autocast getProcAddress("glGetGraphicsResetStatus\x00".raw)
    GetnCompressedTexImage                   = autocast getProcAddress("glGetnCompressedTexImage\x00".raw)
    GetnTexImage                             = autocast getProcAddress("glGetnTexImage\x00".raw)
    GetnUniformdv                            = autocast getProcAddress("glGetnUniformdv\x00".raw)
    GetnUniformfv                            = autocast getProcAddress("glGetnUniformfv\x00".raw)
    GetnUniformiv                            = autocast getProcAddress("glGetnUniformiv\x00".raw)
    GetnUniformuiv                           = autocast getProcAddress("glGetnUniformuiv\x00".raw)
    ReadnPixels                              = autocast getProcAddress("glReadnPixels\x00".raw)
    GetnMapdv                                = autocast getProcAddress("glGetnMapdv\x00".raw)
    GetnMapfv                                = autocast getProcAddress("glGetnMapfv\x00".raw)
    GetnMapiv                                = autocast getProcAddress("glGetnMapiv\x00".raw)
    GetnPixelMapfv                           = autocast getProcAddress("glGetnPixelMapfv\x00".raw)
    GetnPixelMapuiv                          = autocast getProcAddress("glGetnPixelMapuiv\x00".raw)
    GetnPixelMapusv                          = autocast getProcAddress("glGetnPixelMapusv\x00".raw)
    GetnPolygonStipple                       = autocast getProcAddress("glGetnPolygonStipple\x00".raw)
    GetnColorTable                           = autocast getProcAddress("glGetnColorTable\x00".raw)
    GetnConvolutionFilter                    = autocast getProcAddress("glGetnConvolutionFilter\x00".raw)
    GetnSeparableFilter                      = autocast getProcAddress("glGetnSeparableFilter\x00".raw)
    GetnHistogram                            = autocast getProcAddress("glGetnHistogram\x00".raw)
    GetnMinmax                               = autocast getProcAddress("glGetnMinmax\x00".raw)
    TextureBarrier                           = autocast getProcAddress("glTextureBarrier\x00".raw)
}

loadUpTo :: fn(major, minor: i32, getProcAddress: (*u8) -> rawptr) -> void {
    switch major*10+minor {
        case 45: load4_5(getProcAddress); fallthrough;
        case 44: load4_4(getProcAddress); fallthrough;
        case 43: load4_3(getProcAddress); fallthrough;
        case 42: load4_2(getProcAddress); fallthrough;
        case 41: load4_1(getProcAddress); fallthrough;
        case 40: load4_0(getProcAddress); fallthrough;
        case 33: load3_3(getProcAddress); fallthrough;
        case 32: load3_2(getProcAddress); fallthrough;
        case 31: load3_1(getProcAddress); fallthrough;
        case 30: load3_0(getProcAddress); fallthrough;
        case 21: load2_1(getProcAddress); fallthrough;
        case 20: load2_0(getProcAddress); fallthrough;
        case 15: load1_5(getProcAddress); fallthrough;
        case 14: load1_4(getProcAddress); fallthrough;
        case 13: load1_3(getProcAddress); fallthrough;
        case 12: load1_2(getProcAddress); fallthrough;
        case 11: load1_1(getProcAddress); fallthrough;
        case 10: load1_0(getProcAddress);
    }
}

#library "libc"
#foreign libc {
    sscanf :: (buf: *u8, format: *u8, args: #cvargs ..any) -> i32
    strlen :: (*u8) -> i64
    strncmp :: (lhs, rhs: *u8, count: i64) -> i32
}

findVersion :: fn() -> (major: i32, minor: i32) {

    major, minor: i32

    version := GetString(VERSION)
    if version == nil return 0, 0

    prefixes := [3]*u8 {
        "OpenGL ES-CM \x00".raw,
        "OpenGL ES-CL \x00".raw,
        "OpenGL ES \x00".raw,
    }

    for i := 0; i < 3; i += 1 {
        prefix := prefixes[i]
        length := strlen(prefix)
        if strncmp(version, prefix, length) == 0 {
            version += length
            break
        }
    }

    sscanf(version, "%d.%d\x00".raw, &major, &minor)

    return major, minor
}

init :: fn(getProcAddress: (name: *u8) -> rawptr) -> void {

    // 1_0 includes glGetString used to determine version
    load1_0(getProcAddress)

    major, minor := findVersion()

    loadUpTo(major, minor, getProcAddress)
}

